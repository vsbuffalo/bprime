
AUTOS = list(range(1, 23))
AUTOSEX = AUTOS + ['X', 'Y']


## === Human Annotation Data
annot = ["hg38_seqlens.tsv", "phastConsElements100way.bed.gz", "hg38.ncbiRefSeq_exons.bed.gz", "hg38_centro.bed"]

# only keep autosomes
rule seqlens:
  output: "hg38_seqlens.tsv"
  shell:
    """
    curl https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.chrom.sizes | \
      grep -w '^#\|chr[1-9]\|chr[1-2][0-9]' | \
      sort --version-sort -k1,1 -k2,2n > {output}
    """

rule centro:
  output: "hg38_centro.bed"
  shell:
    """
    curl http://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/cytoBand.txt.gz | zgrep "acen" > {output}
    """


rule phastcons:
  output: "phastConsElements100way.bed.gz"
  shell:
    """
    curl http://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/phastConsElements100way.txt.gz | \
      zcat | bioawk -t '{{print $2,$3,$4}}' | gzip > {output}
    """


rule exons:
  output: "hg38.ncbiRefSeq_exons.bed.gz"
  shell:
    """
    curl https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/genes/hg38.ncbiRefSeq.gtf.gz | \
      bioawk -cgff '{{ if ($feature == "exon") {{ print $seqname,$start,$end,$feature }} }}' | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

## === Genomic Windows
rule human_100kb:
  output: "hg38_100kb.bed"
  input: "hg38_seqlens.tsv"
  shell:
     """
     bedtools makewindows -g {input}  -w 100000 > {output}
     """


## === Human Recombination Maps

## ==== DeCode Recombination Map
decode = ["decode_sex_averaged.txt"]
rule decode_map:
  output: "decode_sex_averaged.txt"
  shell:
    """
    #wget https://www.decode.com/additional/sex-averaged.rmap
    wget https://stdpopsim.s3.us-west-2.amazonaws.com/genetic_maps/HomSap/DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    tar -xvzf DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    find DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38 -name "*.txt" | sort --version-sort | xargs -n1 cat  | sed '2,${{/^Chr/d}}' > {output}
    rm -f DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    """

## ==== HapMap Recombination Map 
hapmap_files = [f"HapMapII_GRCh37_liftedOverTo_Hg38/genetic_map_Hg38_{chrom}.txt" for chrom in AUTOS ]
hapmap = ["hapmap_genetic_map.txt"]

rule download_hapmap:
  output: "hapmap_genetic_map.txt"
  shell:
    """
    wget https://stdpopsim.s3.us-west-2.amazonaws.com/genetic_maps/HomSap/HapMapII_GRCh37_liftedOverTo_Hg38.tar.gz
    tar -xvzf HapMapII_GRCh37_liftedOverTo_Hg38.tar.gz

    find HapMapII_GRCh37_liftedOverTo_Hg38 -name "*.txt" | sort --version-sort | xargs -n1 cat  | sed '2,${{/^Chr/d}}' > {output}
    rm -f HapMapII_GRCh37_liftedOverTo_Hg38.tar.gz
    """

## === Simplified Annotation Tracks for Sims
# we want simple, example conservation tracks, but semi-realistic, e.g. exons
conserved_tracks = [f"conserved_by_chrom/chr{chrom}.bed" for chrom in AUTOS]
simtracks = ["conserved.bed.gz", "conserved_slop.bed.gz"] + conserved_tracks

# merged exons/phastcons "conservation" track -- mostly a place holder for simulations
rule conserved_track:
  input: exons="hg38.ncbiRefSeq_exons.bed.gz", phastcons="phastConsElements100way.bed.gz"
  output: "conserved.bed.gz"
  shell: 
      """
      # combine the files, sort and merge overlapping tracks
      (zcat {input.exons}; (zcat {input.phastcons} | \
        bioawk -t '{{ print $1,$2,$3,"conserved" }}')) | grep -w '^#\|chr[1-9]\|chr[1-2][0-9]\|chr[XY]' | \
        sort  --version-sort -k 1,1 -k2,2n | \
        bedtools merge  -c 4 -o distinct | gzip > {output}
      """

rule conserved_slop:
  output: "conserved_slop.bed.gz"
  input: conserved="conserved.bed.gz", seqlens="hg38_seqlens.tsv"
  shell:
     """
     zgrep -P "^chr[0-9]+\t" {input.conserved} | sort --version-sort -k 1,1 -k2,2n | \
       bedtools slop -g {input.seqlens} -b 1000 | bedtools merge -d 2  | gzip > {output}
     """

# sepearate out conserved tracks into separate chromosome files
rule split_conserved:
  output: conserved_tracks
  input: "conserved_slop.bed.gz"
  shell:
      """
      mkdir -p conserved_by_chrom/
      for i in $(seq 1 22); do zgrep -P "chr$i\t" {input} > conserved_by_chrom/chr$i.bed; done
      """

## === Rules for the chr10 SLiM Simulations
chr10 = ["neutral_chr10.bed"]

# putatively neutral regions -- not conserved tracks
rule neutral_chr10:
   output: "neutral_chr10.bed"
   input: conserved="conserved_by_chrom/chr10.bed", seqlens="hg38_seqlens.tsv"
   shell:
      """
      bedtools complement -i {input.conserved} -g {input.seqlens} | grep "^chr10" > {output}
      """

rec = decode + hapmap + chr10 + simtracks
print(rec)

## === Main target
rule all:
  input: annot + rec


