import numpy as np
from bgspy.utils import read_bigwig
from bgspy.genome import Genome
# WARNING: bedtools complement returns all the chromosomes!

AUTOS = list(range(1, 23))
AUTOSEX = AUTOS + ['X', 'Y']
PHASTCONS_THRESH_10 = 471
PHASTCONS_THRESH_5 = 527

## === Human genome data

genome = ["hg38.fa.gz"]

rule hg38:
  # fixes chromosome labels to start with 'chr'
  output: "hg38.fa.gz"
  shell:
    """
    curl http://ftp.ensembl.org/pub/release-107/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz | \
      zcat | sed 's/^>/>chr/' | gzip > {output}
    """

# only keep autosomes
rule seqlens:
  input: "hg38.fa.gz"
  output: "hg38_seqlens.tsv"
  shell:
    """
      bioawk -cfastx '{{ print $name,length($seq) }}' hg38.fa.gz | \
      grep -P '^chr[0-9X]+' |  \
      sort  --version-sort -k 1,1 -k2,2n > {output}
    """

rule seqlens_other:
  output: "{genome}_seqlens.tsv"
  shell: 
    """
    mysql --user=genome --host=genome-mysql.cse.ucsc.edu -B -N  -A -e \
     "select chrom, size from {wildcards.genome}.chromInfo where {wildcards.genome}.chromInfo.chrom not like '_'" | \
      grep -v "_" | sort --version-sort | \
      grep -P '^chr[0-9X]+'  > {output[0]}
    """

# this is needed for validating the liftover
genome += ["hg18_seqlens.tsv", "hg19_seqlens.tsv"] 

## === Human Annotation Data
annot = ["hg38_seqlens.tsv", "phastConsElements100way.txt.gz", 
         "hg38.ensembl.gff3.gz",
         "hg38.ensembl_cds.bed.gz", 
         "cds_no_phastcons.bed.gz",
         "hg38.ensembl_genes.bed.gz", "hg38_centro.bed", "ensembl_pseudogenes.bed.gz",

         "conserved_phastcons_annot.bed.gz", # version for MAF (no 0bp features)
         "hg38.ensembl_utr_annot.bed.gz", # version for MAF (no 0bp features)

         
         "hg38.ensembl_exons.bed.gz", "hg38.ensembl_utrs.bed.gz", 
         "hg38.ensembl_introns_conservative.bed.gz", "hg38.ensembl_introns.bed.gz", 
         "hg38.ensembl_promoters_2kb.bed.gz",
         "hg38.phyloP30way.npz",

         # summary stats table 
         "ensembl_cds_canonical_protein_coding_stats.tsv",
         ]

# for phylofit
annot.extend([f"conserved_phastcons/chr{x}.bed" for x in range(1, 23)])

rule centro:
  output: "hg38_centro.bed"
  shell:
    """
    curl http://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/cytoBand.txt.gz | zgrep "acen" | grep -v "chrY" | sort --version-sort -k1,1 -k2,2n > {output}
    """


rule centro_slop:
  output: "hg38_centro_slop.bed"
  input: centro="hg38_centro.bed", seqlens="hg38_seqlens.tsv"
  shell:
    """
    bedtools slop -g {input.seqlens} -b 5000000 -i {input.centro} | sort --version-sort -k1,1 -k2,2n > {output}
    """
 
rule phylop:
  output: "hg38.phyloP30way.bw"
  shell:
    """
    wget https://hgdownload.soe.ucsc.edu/goldenPath/hg38/phyloP30way/hg38.phyloP30way.bw
    """

rule phylop_npz:
  input: phylop='hg38.phyloP30way.bw', seqlens="hg38_seqlens.tsv"
  output: 'hg38.phyloP30way.npz'
  run:
    g = Genome('hg38', seqlens_file=input.seqlens)
    d = read_bigwig(input.phylop, g.seqlens)
    np.savez(output[0], **d)

rule phastcons:
  output: "phastConsElements100way.txt.gz"
  shell:
    """
    curl http://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/phastConsElements100way.txt.gz | \
     zcat | cut -f2- | grep -P '^chr[0-9X]+\t' | gzip > {output}
    """

rule phastcons_bed:
  # VALIDATION: unclear from UCSC doc whether the .txt.gz is 0 or 1-indexed. 
  # Using table browser BED output produced a version that aligns with ours
  input: "phastConsElements100way.txt.gz"
  output: "phastConsElements100way.bed.gz"
  shell:
    """
     zcat {input} | bioawk -t '{{ print $1,$2,$3 }}' | sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule ensembl_gff:
  output: "hg38.ensembl.gff3.gz"
  shell:
     """
     curl http://ftp.ensembl.org/pub/release-107/gff3/homo_sapiens/Homo_sapiens.GRCh38.107.chr.gff3.gz | \
       zgrep -v '^#' | sed s/^/chr/ | \
       grep -P '^chr[0-9X]+' | \
       grep -v "chrY" | \
       gzip > {output}
     """

rule ensembl_exon_lens:
  input: "ensembl_cds_canonical_protein_coding.fa.gz" # downloaded manually, see README.md
  output: "ensembl_cds_canonical_protein_coding_stats.tsv"
  shell:
    """
    python ../../tools/cds_lengths.py {input[0]} {output[0]}
    """
  
rule ensembl_promoters:
   input: gff="hg38.ensembl.gff3.gz", seqlens="hg38_seqlens.tsv"
   output: "hg38.ensembl_promoters_2kb.bed.gz"
   # based on 2kb left of 5'-UTR.
   shell:
     """
     bedtools flank -i <(zgrep five_prime_UTR {input.gff} | grep -v chrY) -g {input.seqlens} -l 2000 -r 0 -s | \
      bedtools sort | bedtools merge | gzip > {output}
     """

rule ensembl_pseudogenes:
   input: "hg38.ensembl.gff3.gz"
   output: "ensembl_pseudogenes.bed.gz"
   shell:
     """
     zgrep -v "#" {input} | bioawk -cgff ' $feature ~ /^pseudogene$/ {{ print "chr"$seqname,$start,$end,$feature }}' | \
      sort --version-sort -k1,1 -k2,2n |  \
      bedtools merge -c 4 -o distinct | sort --version-sort -k1,1 -k2,2n | gzip > {output}
     """

rule genes:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_genes.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /^gene$/ {{ print $seqname,$start,$end,$feature }} ' {input} | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule exons:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_exons.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /^exon$/ {{ print $seqname,$start,$end,$feature }} ' {input} | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule exons_merged:
  input: "hg38.ensembl_exons.bed.gz"
  output: "hg38.ensembl_exons_merged.bed.gz"
  shell:
    """
      bedtools merge -i {input} > {output}
    """

rule cds:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_cds.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /^CDS$/ {{ print $seqname,$start,$end,$feature }} ' {input} | \
      sort --version-sort -k1,1 -k2,2n | \
      bedtools merge | gzip > {output}
    """

rule utrs:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_utrs.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /five_prime_UTR|three_prime_UTR/ {{ print $seqname,$start,$end,$feature }}' {input} | \
      sort --version-sort -k1,1 -k2,2n | \
      bedtools merge | \
      gzip > {output}
    """

rule utr_annot:
  # cleaner version, no 0bp, for MAF work
  input: "hg38.ensembl_utrs.bed.gz"
  output: "hg38.ensembl_utr_annot.bed.gz"
  shell:
      """
      bioawk -cbed '{{ if ($end-$start > 0) {{ print $1,$2,$3,"utr_"$1":"$2"-"$3 }} }}' {input[0]} | gzip > {output[0]}
      """

rule phastcons_annot:
  # cleaner version, no 0bp, for MAF work
  input: "conserved_phastcons.bed.gz"
  output: "conserved_phastcons_annot.bed.gz"
  shell:
      """
      bioawk -cbed '{{ if ($end-$start > 0) {{ print $1,$2,$3,"phastcons_"$1":"$2"-"$3 }} }}' {input[0]} | gzip > {output[0]}
      """


rule introns:
  input: genes="hg38.ensembl_genes.bed.gz", utr="hg38.ensembl_utrs.bed.gz", exon="hg38.ensembl_exons_merged.bed.gz"
  output: "hg38.ensembl_introns.bed.gz"
  shell:
    """
    zcat {input.genes} | cut -f1-3 | bedtools merge | \
     bedtools subtract -a - -b {input.exon} | bedtools subtract -a -  -b {input.utr} | \
     bioawk -cbed '{{ print $1,$2,$3,"intron" }}' | \
     gzip > {output}
    """

rule introns_conservative:
  # take the introns and shrink them by 20bp, since 
  # splicing may conserve this -- a buffer
  input: "hg38.ensembl_introns.bed.gz"
  output: "hg38.ensembl_introns_conservative.bed.gz"
  params: buffer=20
  shell:
    """
    bioawk -cbed '{{ $start = $start - {params.buffer}; $end = $end - {params.buffer}; if ($end > $start) {{ print; }} }}' {input} |  gzip > {output}
    """

rule download_encode_gff:
  output: "homo_sapiens.GRCh38.Regulatory_Build.regulatory_features.20220822.gff.gz"
  shell:
    """
    wget https://ftp.ensembl.org/pub/release-108/regulation/homo_sapiens/homo_sapiens.GRCh38.Regulatory_Build.regulatory_features.20220822.gff.gz
    """

rule regulatory:
  input: "homo_sapiens.GRCh38.Regulatory_Build.regulatory_features.20220822.gff.gz"
  output: "hg38.regulatory.bed.gz"
  shell:
    """
   zcat {input} | sed 's/^/chr/' | grep -P '^chr[0-9X]+' | \
		bioawk -cgff  '{{print $seqname, $start, $end, $feature}}' | \
      sed 's/CTCF_binding_site/binding_site/' | \
      sed 's/TF_binding_site/binding_site/' | \
      sort  --version-sort -k 1,1 -k2,2n | gzip > {output}
		"""


## === Genomic Windows
rule human_100kb:
  output: "hg38_100kb.bed"
  input: "hg38_seqlens.tsv"
  shell:
     """
     bedtools makewindows -g {input}  -w 100000 > {output}
     """


## === Human Recombination Maps

## ==== DeCode Recombination Map
decode = [] # ignore for now
#@decode = ["decode_sex_averaged.txt"]
rule decode_map:
  output: "decode_sex_averaged.txt"
  shell:
    """
    #wget https://www.decode.com/additional/sex-averaged.rmap
    wget https://stdpopsim.s3.us-west-2.amazonaws.com/genetic_maps/HomSap/DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    tar -xvzf DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    find DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38 -name "*.txt" | sort --version-sort | xargs -n1 cat  | sed '2,${{/^Chr/d}}' > {output}
    rm -f DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    """

## ==== HapMap Recombination Map 
hapmap_files = [f"HapMapII_GRCh37_liftedOverTo_Hg38/genetic_map_Hg38_{chrom}.txt" for chrom in AUTOS ]
hapmap = ["hapmap_genetic_map.txt", "aamap_hg36.tsv", "aamap_hg38.tsv"]

rule download_hapmap:
  output: "hapmap_genetic_map.txt"
  shell:
    """
    wget https://stdpopsim.s3.us-west-2.amazonaws.com/genetic_maps/HomSap/HapMapII_GRCh38.tar.gz
    mkdir -p HapMapII_GRCh37_liftedOverTo_Hg38
    tar -xvzf HapMapII_GRCh38.tar.gz --directory HapMapII_GRCh37_liftedOverTo_Hg38

    find HapMapII_GRCh37_liftedOverTo_Hg38 -name "*.txt" | sort --version-sort | xargs -n1 cat  | sed '2,${{/^Chr/d}}' > {output}
    rm -f HapMapII_GRCh38.tar.gz
    """

rule chrom_maplens:
  output: "hapmap_chrom_maplens.bed"
  input: genmap="hapmap_genetic_map.txt", seqlens="hg38_seqlens.tsv"
  run:
    from bgspy.recmap import RecMap
    map = RecMap(input[0])

 
## ==== Hinch et al African American Recombination Map
rule raw_aa:
  output: "aamap.tar.gz"
  shell:
    """
    wget https://www.well.ox.ac.uk/~anjali/AAmap/aamap.tar.gz
    """

rule aa_hg37:
  # NOTE: this map looks to have very severe errors due to liftover
  output: "maps_b37.tar.gz"
  shell:
    """
    wget https://www.well.ox.ac.uk/~anjali/AAmap/maps_b37.tar.gz
    """

rule aa_recmap37:
  # untar the liftover map
  input: "maps_b37.tar.gz"
  output: "maps_b37/maps_chr.1"  # single place holder
  shell:
    """
    tar -xvzf {input[0]}
    """

rule aa_recmap:
  input: tar="aamap.tar.gz", genome="hg18_seqlens.tsv"
  output: "aamap_hg36.tsv"
  shell:
    """
    tar -xvzf {input.tar}
    python ../../tools/combine_aamap.py AAmap/ > aamap_hg36_raw.tsv
    python ../../tools/liftover_recmap.py convert aamap_hg36_raw.tsv \
      --genome {input.genome} --outfile {output[0]}
    """

rule aa_recmap37_combine:
  # get only the AA map out of this liftover map (the original
  # combines hapmap, decode, etc)
  input: "maps_b37/maps_chr.1"
  output: "aamap_hg37_raw.tsv"
  run: 
    import pandas as pd
    chroms = list(range(1, 23))
    ds = []
    for c in chroms:
      # ugh why do people use spaaaaces
      d = pd.read_table(f"maps_b37/maps_chr.{c}", sep=' ')
      d['chrom'] = f"chr{c}"
      d = d.loc[:, ('chrom', "Physical_Pos", "AA_Map")]
      d.columns = ('chrom', 'end', 'rate')
      ds.append(d)
    d = pd.concat(ds)
    d.to_csv(output[0], sep='\t', header=False, index=False)


rule liftover_hg19_hg38:
   output: "hg19ToHg38.over.chain.gz"
   shell:
     """
     wget https://hgdownload.soe.ucsc.edu/goldenPath/hg19/liftOver/hg19ToHg38.over.chain.gz
     """

rule aa_liftover:
  # NOTE: this also produces a validation directory of validiation/diagnostic plots.
  # Also, the threshold seems to remove some estimates that unusually high in the 
  # original map, which seems okay.
  input: recmap="aamap_hg36.tsv", chain="hg18ToHg38.over.chain.gz", genome="hg18_seqlens.tsv"
  output: "aamap_hg38.tsv"
  shell:
    """
    python ../../tools/liftover_recmap.py liftover --mapfile {input.recmap} --chain-to {input.chain} \
      --genome {input.genome} --outfile {output[0]} --thresh 100
    """

## === Conservation Tracks
cons = ["conserved_phastcons.bed.gz",

        # feature tracks with genomic elements only
        "conserved_cds_phastcons.bed.gz",
        "conserved_cds_utrs_phastcons.bed.gz",

        # this is phastcons with all genes removed, with CDS added
        "conserved_phastcons_not_genes_cds.bed.gz",
        # genes + cds + phastcons not in genes
        "conserved_phastcons_not_genes_cds_genes.bed.gz",

        # with encode regulatory elements -- currently not used
        #"conserved_cds_utrs_regulatory_phastcons.bed.gz",
        "conserved_genes_cds_regulatory.bed.gz",
        "conserved_genes_cds_regulatory_full.bed.gz",

        # simplified phastcons -- merged 100bp adjacent
        "conserved_cds_utrs_phastcons_simplified.bed.gz",

        # full-coverage feature tracks
        "conserved_cds_utrs_phastcons_full.bed.gz",
        "conserved_cds_phastcons_full.bed.gz",
        "conserved_phastcons_not_genes_cds_full.bed.gz",
        "conserved_phastcons_not_genes_cds_genes_full.bed.gz",
        "conserved_phastcons_not_genes_cds_genes_full.bed",
        "conserved_cds_genes_full.bed.gz",
        "conserved_cds_genes_promoters.bed.gz",
        "conserved_cds_genes_promoters_full.bed.gz",

        # merged and unlabelled (e.g. treated as all one feature type, 
        # for sims and model comparison)
        "conserved_cds_phastcons_merged.bed.gz",
        "conserved_cds_utrs_phastcons_merged.bed.gz",
        "conserved_cds_utrs_phastcons_merged.bed",
        "conserved_cds_utrs_phastcons_merged_full.bed",
] 

# this is used for sims with combined conserved regions (phastcons)
rule conserved_track:
  input: phastcons="phastConsElements100way.bed.gz"
  output: "conserved_phastcons.bed.gz"
  shell: 
      """
      # combine the files, sort and merge overlapping tracks
      # the messy grep filters out alt chromosome
      (zcat {input.phastcons} | \
        bioawk -t '{{ print $1,$2,$3,"phastcons" }}') | grep -P "^chr[0-9]+\t" | \
        sort  --version-sort -k 1,1 -k2,2n | \
        bedtools merge | gzip > {output}
      """

rule split_conserved_track:
  input: "conserved_phastcons.bed.gz"
  output: "conserved_phastcons/{chrom}.bed"
  shell:
    """
    zgrep "^{wildcards.chrom}" {input} > {output[0]}
    """

# this is used for sims with combined conserved regions (phastcons)
rule phastcons_simplified:
  input: "conserved_phastcons.bed.gz"
  output: "conserved_phastcons_simplified.bed.gz"
  shell: 
      """
      bedtools merge -d 100 -i {input} | gzip > {output}
      """

rule phastcons_no_genes:  
  input: phastcons="conserved_phastcons.bed.gz", genes="hg38.ensembl_genes.bed.gz"
  output: "conserved_phastcons_not_genes.bed.gz"
  shell:
      """
      bedtools subtract -a {input.phastcons} -b {input.genes} | \
        bioawk -cbed '{{ print $1,$2,$3,"phastcons_no_genes" }}' | gzip > {output[0]}
      """

rule conserved_cds_phastcons:
  input: cds="hg38.ensembl_cds.bed.gz", phastcons="conserved_phastcons.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_phastcons.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} --bed phastcons {input.phastcons} | \
      gzip > {output}
    """

rule cds_no_phastcons:
  input: cds="hg38.ensembl_cds.bed.gz", phastcons="conserved_phastcons.bed.gz"
  output: "cds_no_phastcons.bed.gz"
  shell:
    """
    bedtools subtract -a {input.cds} -b {input.phastcons} | gzip > {output[0]}
    """

rule conserved_cds_phastcons_merged:
  input: "conserved_cds_phastcons.bed.gz"
  output: "conserved_cds_phastcons_merged.bed.gz"
  shell:
    """
    zcat {input[0]} | cut -f1,2,3 | gzip > {output}
    """

#rule conserved_cds_utrs_regulatory_phastcons:
#  input: cds="hg38.ensembl_cds.bed.gz", utrs="hg38.ensembl_utrs.bed.gz", phastcons="conserved_phastcons.bed.gz", regulatory="hg38.regulatory.bed.gz", seqlens="hg38_seqlens.tsv"
#  output: "conserved_cds_utrs_regulatory_phastcons.bed.gz"
#  shell:
#    """
#    python ../../tools/combine_features.py --seqlens {input.seqlens} \
#      --bed cds {input.cds} --bed utr {input.utrs} \
#      --bedfile {input.regulatory} \
#      --bed phastcons {input.phastcons} | \
#      gzip > {output}
#    """

rule conserved_cds_utrs_phastcons:
  input: cds="hg38.ensembl_cds.bed.gz", utrs="hg38.ensembl_utrs.bed.gz", phastcons="conserved_phastcons.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_phastcons.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} --bed utr {input.utrs} --bed phastcons {input.phastcons} | \
      gzip > {output}
    """

rule conserved_cds_phastcons_full:
  # not based on the simplified phastcons track!
  input: cons="conserved_cds_phastcons.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_phastcons_full.bed.gz"
  shell:
    """
    bedtools complement -i {input.cons} -g {input.seqlens} | bioawk -t '{{print $0,"other"}}' > conserved_cds_phastcons_complement.bed
    (cat conserved_cds_phastcons_complement.bed; zcat {input.cons}) | sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """


rule conserved_genes_cds_regulatory_full:
  input: cons="conserved_genes_cds_regulatory.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_genes_cds_regulatory_full.bed.gz"
  shell:
    """
    bedtools complement -i {input.cons} -g {input.seqlens} | bioawk -t '{{print $0,"other"}}' > tmp_01.bed
    (cat tmp_01.bed; zcat {input.cons}) | sort --version-sort -k1,1 -k2,2n | gzip > {output}
    rm -f tmp_01.bed
    """

rule conserved_not_gene_cds_full:
  input: cons="conserved_phastcons_not_genes_cds.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_phastcons_not_genes_cds_full.bed.gz"
  shell:
    """
    bedtools complement -i {input.cons} -g {input.seqlens} | bioawk -t '{{print $0,"other"}}' > tmp_1.bed
    (cat tmp_1.bed; zcat {input.cons}) | sort --version-sort -k1,1 -k2,2n | gzip > {output}
    rm -f tmp_1.bed
    """

rule conserved_not_gene_cds_genes_full:
  input: cons="conserved_phastcons_not_genes_cds_genes.bed.gz", seqlens="hg38_seqlens.tsv"
  output: gz="conserved_phastcons_not_genes_cds_genes_full.bed.gz", raw="conserved_phastcons_not_genes_cds_genes_full.bed"
  shell:
    """
    bedtools complement -i {input.cons} -g {input.seqlens} | bioawk -t '{{print $0,"other"}}' > tmp_1.bed
    (cat tmp_1.bed; zcat {input.cons}) | sort --version-sort -k1,1 -k2,2n  > {output.raw}
    cat {output.raw} | gzip > {output.gz}
    rm -f tmp_1.bed
    """

rule conserved_cds_genes_full:
  input: cons="conserved_cds_genes.bed.gz", seqlens="hg38_seqlens.tsv"
  output: gz="conserved_cds_genes_full.bed.gz", raw="conserved_cds_genes_full.bed"
  shell:
    """
    bedtools complement -i {input.cons} -g {input.seqlens} | bioawk -t '{{print $0,"other"}}' > tmp_1.bed
    (cat tmp_1.bed; zcat {input.cons}) | sort --version-sort -k1,1 -k2,2n  > {output.raw}
    cat {output.raw} | gzip > {output.gz}
    rm -f tmp_1.bed
    """

rule conserved_cds_genes_promoters_full_track:
  input: cons="conserved_cds_genes_promoters.bed.gz", seqlens="hg38_seqlens.tsv"
  output: gz="conserved_cds_genes_promoters_full.bed.gz", raw="conserved_cds_genes_promoters_full.bed"
  shell:
    """
    bedtools complement -i {input.cons} -g {input.seqlens} | bioawk -t '{{print $0,"other"}}' > tmp_1.bed
    (cat tmp_1.bed; zcat {input.cons}) | sort --version-sort -k1,1 -k2,2n  > {output.raw}
    cat {output.raw} | gzip > {output.gz}
    rm -f tmp_1.bed
    """

rule conserved_cds_utrs_phastcons_full:
  # NOTE: based on the simplified phastcons track!
  input: cons="conserved_cds_utrs_phastcons_simplified.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_phastcons_full.bed.gz"
  shell:
    """
    bedtools complement -i {input.cons} -g {input.seqlens} | bioawk -t '{{print $0,"other"}}' > conserved_cds_utrs_phastcons_complement.bed
    (cat conserved_cds_utrs_phastcons_complement.bed; zcat {input.cons}) | sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule conserved_cds_utrs_phastcons_merged:
  input: utrs="hg38.ensembl_utrs.bed.gz", cds="hg38.ensembl_cds.bed.gz", phastcons="conserved_phastcons.bed.gz", seqlens="hg38_seqlens.tsv"
  output: raw="conserved_cds_utrs_phastcons_merged.bed", gz="conserved_cds_utrs_phastcons_merged.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed utr {input.utrs} --bed cds {input.cds} \
      --bed phastcons {input.phastcons} | \
      bioawk -t '{{ print $1,$2,$3,"merged"}}' > {output.raw}
      cat {output.raw} | gzip > {output.gz}
    """

rule conserved_cds_utrs_phastcons_merged_full:
  # not based on the simplified phastcons track!
  input: cons="conserved_cds_utrs_phastcons_merged.bed.gz", seqlens="hg38_seqlens.tsv"
  output: gz="conserved_cds_utrs_phastcons_merged_full.bed.gz", raw="conserved_cds_utrs_phastcons_merged_full.bed"
  shell:
    """
    bedtools complement -i {input.cons} -g {input.seqlens} | bioawk -t '{{print $0,"other"}}' > conserved_cds_utrs_phastcons_merged_complement.bed
    (cat conserved_cds_utrs_phastcons_merged_complement.bed; zcat {input.cons}) | sort --version-sort -k1,1 -k2,2n > {output.raw}
    cat {output.raw} | gzip > {output.gz}
    """


rule conserved_no_cds_track:
  input: not_genes="conserved_phastcons_not_genes.bed.gz", cds="hg38.ensembl_cds.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_phastcons_not_genes_cds.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} \
      --bed phastcons {input.not_genes} | \
      gzip > {output}
    """

rule conserved_genes_cds_regulatory:
  input: cds="hg38.ensembl_cds.bed.gz", seqlens="hg38_seqlens.tsv", 
         genes="hg38.ensembl_genes.bed.gz", regulatory="hg38.regulatory.bed.gz"
  output: "conserved_genes_cds_regulatory.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} --bed gene {input.genes} \
      --bedfile {input.regulatory} | \
      gzip > {output}
    """


rule conserved_no_genes_genes_track:
  input: not_genes="conserved_phastcons_not_genes.bed.gz", cds="hg38.ensembl_cds.bed.gz",
         seqlens="hg38_seqlens.tsv", genes="hg38.ensembl_genes.bed.gz"
  output: "conserved_phastcons_not_genes_cds_genes.bed.gz" # yes, I'm sorry for this name
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} --bed gene {input.genes} \
      --bed phastcons {input.not_genes} | \
      gzip > {output}
    """

rule conserved_cds_genes_track:
  input: cds="hg38.ensembl_cds.bed.gz", seqlens="hg38_seqlens.tsv", genes="hg38.ensembl_genes.bed.gz"
  output: "conserved_cds_genes.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} --bed gene {input.genes} | \
      gzip > {output}
    """

rule conserved_cds_genes_promoters_track:
  input: cds="hg38.ensembl_cds.bed.gz", seqlens="hg38_seqlens.tsv", genes="hg38.ensembl_genes.bed.gz", promoter="hg38.ensembl_promoters_2kb.bed.gz"
  output: "conserved_cds_genes_promoters.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} --bed gene {input.genes} \
      --bed promoter {input.promoter} | \
      gzip > {output}
    """

### === Simplified Annotation Tracks for Sims
## we want simple, example conservation tracks, but semi-realistic, e.g. CDS
#sim_cons = ["conserved_phastcons_chr10.bed",  # this is currently the primary conserved track for simulations
#            "conserved_cds_utrs_phastcons_merged_chr10.bed",
#            "conserved_cds_phastcons_merged_chr10.bed",
#            ]
#sim_neut = ["neutral_phastcons_chr10.bed.gz"]
#
## sepearate out conserved tracks into separate chromosome files
#rule split_phastcons:
#  input: "conserved_phastcons.bed.gz"
#  output: "conserved_phastcons_chr10.bed"
#  shell:
#      """
#      zgrep "chr10" {input} > {output}
#      """
#
#rule split_merged_noutr:
#  input: "conserved_cds_phastcons_merged.bed.gz"
#  output: "conserved_cds_phastcons_merged_chr10.bed"
#  shell:
#      """
#      zgrep "chr10" {input} | cut -f1-3 > {output}
#      mkdir -p calc_bkgd_conserved/ && cp conserved_cds_phastcons_merged_chr10.bed calc_bkgd_conserved/chr10.bed
#      """
#
#rule split_merged:
#  input: "conserved_cds_utrs_phastcons_merged.bed.gz"
#  output: "conserved_cds_utrs_phastcons_merged_chr10.bed"
#  shell:
#      """
#      zgrep "chr10" {input} | cut -f1-3 > {output}
#      mkdir -p calc_bkgd_conserved/ && cp conserved_cds_utrs_phastcons_merged_chr10.bed calc_bkgd_conserved/chr10.bed
#      """
#
#rule sim_neutral:
#   # for the only phastcons-only sims
#   input: conserved="conserved_phastcons_chr10.bed", seqlens="hg38_seqlens.tsv"
#   output: "neutral_phastcons_chr10.bed.gz"
#   shell:
#      """
#       cut -f1-3 {input.conserved} | \
#       sort --version-sort -k1,1 -k2,2n | \
#       bedtools merge | \
#       grep chr10 | \
#       bedtools complement -L -i - -g {input.seqlens} | \
#       gzip > {output}
#      """
#
### === Calcbkgd files
calc_bkgd = ["hg38_chr10_seqlens.tsv", "conserved_phastcons/chr10.bed"]
rule split_phastcons:
  input: "conserved_phastcons.bed.gz"
  output: "conserved_phastcons_chr10.bed"
  shell:
      """
      zgrep "chr10" {input} > {output}
      """

rule seqlens_chr10:
  input: "hg38_seqlens.tsv"
  output: "hg38_chr10_seqlens.tsv"
  shell:
    """
      grep "chr10" {input} > {output}
    """

rule chr10_conserved:
  input: "conserved_phastcons_chr10.bed"
  output: "conserved_phastcons/chr10.bed"
  shell:
    """
    mkdir -p conserved_phastcons
    cp {input} conserved_phastcons/chr10.bed
    """


## === Accessible Regions
accessible = ["no_centro.bed", "h1kg_strict.bed",  "no_centro_strict.bed"]

rule strict:
  output: "h1kg_strict.bed"
  shell: 
    """
    wget -O {output} http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data_collections/1000_genomes_project/working/20160622_genome_mask_GRCh38/StrictMask/20160622.allChr.mask.bed
    """

rule no_centro:
  input: centro="hg38_centro_slop.bed", seqlens="hg38_seqlens.tsv"
  output: "no_centro.bed"
  shell:
    """
    bedtools complement -i {input.centro} -g {input.seqlens} > {output}
    """

rule no_centro_strict:
  input: no_centro="no_centro.bed", seqlens="hg38_seqlens.tsv", strict="h1kg_strict.bed"
  output: "no_centro_strict.bed"
  shell:
    """
    bedtools intersect -a {input.no_centro} -b {input.strict} > {output}
    """

## === Neutral Regions
neutral = ["neutral_phastcons_genes_chr10.bed", "neutral_phastcons_genes.bed.gz"]

# Putatively neutral regions -- here we merge all phastcons and genes.
# Note, the last step is to take the complement of the conserved regions = putatively netural regions
# Importantly, below, we add in introns since these are neutralish-ish and make up a huge part of the 
# human genome.
rule neutral:
   input: conserved="phastConsElements100way.bed.gz", genes="hg38.ensembl_genes.bed.gz", seqlens="hg38_seqlens.tsv"
   output: "neutral_phastcons_genes.bed.gz"
   shell:
      """
      zcat {input.conserved} {input.genes} | \
       cut -f1-3 | \
       sort --version-sort -k1,1 -k2,2n | \
       bedtools slop -g {input.seqlens} -b 1000  | \
       bedtools merge | \
       bedtools complement -i - -g {input.seqlens} | gzip > {output}
      """

rule neutral_introns:
   # we add back in the introns as these make up ~40% of the genome and are neutralish
   input: neut="neutral_phastcons_genes.bed.gz", intron="hg38.ensembl_introns_conservative.bed.gz"
   output: "neutral_phastcons_genes_with_introns.bed.gz"
   shell:
     """
     zcat {input.neut} {input.intron} | sort --version-sort -k1,1 -k2,2n | \
      gzip > {output}
     """

# putatively neutral regions for sims, only chr10, simply features -- not conserved tracks 
rule neutral_chr10:
   input: conserved="neutral_phastcons_genes.bed.gz", seqlens="hg38_seqlens.tsv"
   output: "neutral_phastcons_genes_chr10.bed"
   shell:
      """
      bedtools complement -i {input.conserved} -g {input.seqlens} | grep "^chr10" > {output}
      """

rec = decode + hapmap 

## === Other Data (e.g. GWAS catalog)
other = ["gwas_catalog.tsv"]
rule gwsascat:
  output: "gwas_catalog.tsv"
  shell: 
     """
     wget -O {output[0]} https://www.ebi.ac.uk/gwas/api/search/downloads/full
     """

## === Main target
rule all:
  input: annot + rec + cons + neutral + accessible + genome + calc_bkgd + other


