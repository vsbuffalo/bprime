import numpy as np
from bgspy.utils import load_cadd_bed_scores, read_bigwig
from bgspy.utils import quantize_track, genome_wide_quantiles
from bgspy.genome import Genome
# WARNING: bedtools complement returns all the chromosomes!

AUTOS = list(range(1, 23))
AUTOSEX = AUTOS + ['X', 'Y']
PHASTCONS_THRESH_10 = 471
PHASTCONS_THRESH_5 = 527

## === Human genome data

genome = ["hg38.fa.gz"]

rule hg38:
  # fixes chromosome labels to start with 'chr'
  output: "hg38.fa.gz"
  shell:
    """
    curl http://ftp.ensembl.org/pub/release-107/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz | \
      zcat | sed 's/^>/>chr/' | gzip > {output}
    """

# only keep autosomes
rule seqlens:
  input: "hg38.fa.gz"
  output: "hg38_seqlens.tsv"
  shell:
    """
      bioawk -cfastx '{{ print $name,length($seq) }}' hg38.fa.gz | \
      sed 's/^/chr/' | \
      grep -P '^chr[0-9X]+' |  \
      sort  --version-sort -k 1,1 -k2,2n > {output}
    """


## === Human Annotation Data
annot = ["hg38_seqlens.tsv", "phastConsElements100way.txt.gz", 
         "hg38.ensembl.gff3.gz",
         "hg38.ensembl_cds.bed.gz", 
         "cds_no_phastcons.bed.gz",
         "hg38.ensembl_genes.bed.gz", "hg38_centro.bed", "ensembl_pseudogenes.bed.gz",

         "hg38.ensembl_cds_annot.bed.gz", # version with tx IDs
         "conserved_phastcons_annot.bed.gz", # version for MAF (no 0bp features)
         "hg38.ensembl_utr_annot.bed.gz", # version for MAF (no 0bp features)

         
         "hg38.ensembl_exons.bed.gz", "hg38.ensembl_utrs.bed.gz", 
         "hg38.ensembl_introns_conservative.bed.gz", "hg38.ensembl_introns.bed.gz", 
         "hg38.ensembl_promoters_2kb.bed.gz",
         #"cadd_whole_genome_SNVs.tsv.gz",
         #"cadd_whole_genome_SNVs.bed.gz",
         #"cadd_whole_genome_SNVs.npz",
         #"cadd_whole_genome_SNVs_binned.bed.gz",
         "hg38.phyloP30way.npz",

         # summary stats table 
         "ensembl_cds_canonical_protein_coding_stats.tsv",
         ]

# for phylofit
annot.extend([f"conserved_phastcons/chr{x}.bed" for x in range(1, 23)])

rule centro:
  output: "hg38_centro.bed"
  shell:
    """
    curl http://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/cytoBand.txt.gz | zgrep "acen" | grep -v "chrY" | sort --version-sort -k1,1 -k2,2n > {output}
    """


rule centro_slop:
  output: "hg38_centro_slop.bed"
  input: centro="hg38_centro.bed", seqlens="hg38_seqlens.tsv"
  shell:
    """
    bedtools slop -g {input.seqlens} -b 5000000 -i {input.centro} | sort --version-sort -k1,1 -k2,2n > {output}
    """
 
rule phylop:
  output: "hg38.phyloP30way.bw"
  shell:
    """
    wget https://hgdownload.soe.ucsc.edu/goldenPath/hg38/phyloP30way/hg38.phyloP30way.bw
    """

rule phylop_npz:
  input: phylop='hg38.phyloP30way.bw', seqlens="hg38_seqlens.tsv"
  output: 'hg38.phyloP30way.npz'
  run:
    g = Genome('hg38', seqlens_file=input.seqlens)
    d = read_bigwig(input.phylop, g.seqlens)
    np.savez(output[0], **d)

rule cadd:
  output: "cadd_whole_genome_SNVs.tsv.gz"
  shell:
    """
    wget -O {output} https://krishna.gs.washington.edu/download/CADD/v1.6/GRCh38/whole_genome_SNVs.tsv.gz
    """

rule cadd_bed:
  input: "cadd_whole_genome_SNVs.tsv.gz"
  output: "cadd_whole_genome_SNVs.bed.gz"
  shell:
    """
     zcat {input[0]} | bioawk -t '{{print $1,$2,$2+1,$4,$6}}' | grep -v '^#' | \
       sed 's/^/chr/' | bedtools merge -i - -d -1 -c 1,5,5 -o count,mean,max | gzip > {output[0]}
    """

rule cadd_npz:
  input: cadd="cadd_whole_genome_SNVs.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "cadd_whole_genome_SNVs.npz"
  run:
    g = Genome('hg38', seqlens_file=input.seqlens)
    d = load_cadd_bed_scores(input.cadd, g.seqlens)
    np.savez(output[0], **d)

rule cadd_cov:
  input: "cadd_whole_genome_SNVs.npz", seqlens="hg38_seqlens.tsv"
  output: "cadd_whole_genome_SNVs_binned.bed.gz", "cadd_binning_info.txt"
  run:
    d = np.load(input[0])
    g = Genome('hg38', seqlens_file=input.seqlens)
    alphas = np.array([0., 0.9, 0.94, 0.98, 1.])
    cuts = genome_wide_quantiles(d, alphas, subsample_chrom = 0.001)
    label = [f"{np.round(a * 100, 1)}%" for a in alphas.flat]
    quantize_track(d, cuts, labels=label, bed_file=output[0])
    np.savetxt(output[1], np.stack((alphas, cuts)).T)

rule phastcons:
  output: "phastConsElements100way.txt.gz"
  shell:
    """
    curl http://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/phastConsElements100way.txt.gz | \
     zcat | cut -f2- | grep -P '^chr[0-9X]+\t' | gzip > {output}
    """

rule phastcons_bed:
  # VALIDATION: unclear from UCSC doc whether the .txt.gz is 0 or 1-indexed. 
  # Using table browser BED output produced a version that aligns with ours
  input: "phastConsElements100way.txt.gz"
  output: "phastConsElements100way.bed.gz"
  shell:
    """
     zcat {input} | bioawk -t '{{ print $1,$2,$3 }}' | sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule ensembl_gff:
  output: "hg38.ensembl.gff3.gz"
  shell:
     """
     curl http://ftp.ensembl.org/pub/release-107/gff3/homo_sapiens/Homo_sapiens.GRCh38.107.chr.gff3.gz | \
       zgrep -v '^#' | sed s/^/chr/ | \
       grep -P '^chr[0-9X]+' | \
       grep -v "chrY" | \
       gzip > {output}
     """

rule ensembl_exon_lens:
  input: "ensembl_cds_canonical_protein_coding.fa.gz" # downloaded manually, see README.md
  output: "ensembl_cds_canonical_protein_coding_stats.tsv"
  shell:
    """
    python ../../tools/cds_lengths.py {input[0]} {output[0]}
    """
  
rule ensembl_promoters:
   input: gff="hg38.ensembl.gff3.gz", seqlens="hg38_seqlens.tsv"
   output: "hg38.ensembl_promoters_2kb.bed.gz"
   # based on 2kb left of 5'-UTR.
   shell:
     """
     bedtools flank -i <(zgrep five_prime_UTR {input.gff} | grep -v chrY) -g {input.seqlens} -l 2000 -r 0 -s | \
      bedtools sort | bedtools merge | gzip > {output}
     """


rule ensembl_pseudogenes:
   input: "hg38.ensembl.gff3.gz"
   output: "ensembl_pseudogenes.bed.gz"
   shell:
     """
     zgrep -v "#" {input} | bioawk -cgff ' $feature ~ /^pseudogene$/ {{ print "chr"$seqname,$start,$end,$feature }}' | \
      sort --version-sort -k1,1 -k2,2n |  \
      bedtools merge -c 4 -o distinct | sort --version-sort -k1,1 -k2,2n | gzip > {output}
     """

rule genes:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_genes.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /^gene$/ {{ print $seqname,$start,$end,$feature }} ' {input} | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule exons:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_exons.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /^exon$/ {{ print $seqname,$start,$end,$feature }} ' {input} | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule exons_merged:
  input: "hg38.ensembl_exons.bed.gz"
  output: "hg38.ensembl_exons_merged.bed.gz"
  shell:
    """
      bedtools merge -i {input} > {output}
    """

rule cds:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_cds.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /^CDS$/ {{ print $seqname,$start,$end,$feature }} ' {input} | \
          sort --version-sort -k1,1 -k2,2n | 
          bedtools merge | gzip > {output}
    """

rule cds_annot:
  # cleaner version, no 0bp, for MAF work
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_cds_annot.bed.gz"
  shell:
      """
      python ../../tools/annot_gff.py {input[0]} | gzip > {output[0]}
      """

rule utrs:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_utrs.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /five_prime_UTR|three_prime_UTR/ {{ print $seqname,$start,$end,$feature }}' {input} | \
      bedtools merge -i -i | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule utr_annot:
  # cleaner version, no 0bp, for MAF work
  input: "hg38.ensembl_utrs.bed.gz"
  output: "hg38.ensembl_utr_annot.bed.gz"
  shell:
      """
      bioawk -cbed '{{ if ($end-$start > 0) {{ print $1,$2,$3,"utr_"$1":"$2"-"$3 }} }}' {input[0]} | gzip > {output[0]}
      """

rule phastcons_annot:
  # cleaner version, no 0bp, for MAF work
  input: "conserved_phastcons.bed.gz"
  output: "conserved_phastcons_annot.bed.gz"
  shell:
      """
      bioawk -cbed '{{ if ($end-$start > 0) {{ print $1,$2,$3,"phastcons_"$1":"$2"-"$3 }} }}' {input[0]} | gzip > {output[0]}
      """


rule introns:
  input: genes="hg38.ensembl_genes.bed.gz", utr="hg38.ensembl_utrs.bed.gz", exon="hg38.ensembl_exons_merged.bed.gz"
  output: "hg38.ensembl_introns.bed.gz"
  shell:
    """
    zcat {input.genes} | cut -f1-3 | bedtools merge | \
     bedtools subtract -a - -b {input.exon} | bedtools subtract -a -  -b {input.utr} | \
     bioawk -cbed '{{ print $1,$2,$3,"intron" }}' | \
     gzip > {output}
    """

rule introns_conservative:
  # take the introns and shrink them by 20bp, since 
  # splicing may conserve this -- a buffer
  input: "hg38.ensembl_introns.bed.gz"
  output: "hg38.ensembl_introns_conservative.bed.gz"
  params: buffer=20
  shell:
    """
    bioawk -cbed '{{ $start = $start - {params.buffer}; $end = $end - {params.buffer}; if ($end > $start) {{ print; }} }}' {input} |  gzip > {output}
    """

rule download_encode_gff:
  output: "homo_sapiens.GRCh38.Regulatory_Build.regulatory_features.20220822.gff.gz"
  shell:
    """
    wget https://ftp.ensembl.org/pub/release-108/regulation/homo_sapiens/homo_sapiens.GRCh38.Regulatory_Build.regulatory_features.20220822.gff.gz
    """

rule regulatory:
  input: "homo_sapiens.GRCh38.Regulatory_Build.regulatory_features.20220822.gff.gz"
  output: "hg38.regulatory.bed.gz"
  shell:
    """
   zcat {input} | sed 's/^/chr/' | grep -P '^chr[0-9X]+' | \
		bioawk -cgff  '{{print $seqname, $start, $end, $feature}}' | \
      sed 's/CTCF_binding_site/binding_site/' | \
      sed 's/TF_binding_site/binding_site/' | \
      sort  --version-sort -k 1,1 -k2,2n | gzip > {output}
		"""


## === Genomic Windows
rule human_100kb:
  output: "hg38_100kb.bed"
  input: "hg38_seqlens.tsv"
  shell:
     """
     bedtools makewindows -g {input}  -w 100000 > {output}
     """


## === Human Recombination Maps

## ==== DeCode Recombination Map
decode = ["decode_sex_averaged.txt"]
rule decode_map:
  output: "decode_sex_averaged.txt"
  shell:
    """
    #wget https://www.decode.com/additional/sex-averaged.rmap
    wget https://stdpopsim.s3.us-west-2.amazonaws.com/genetic_maps/HomSap/DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    tar -xvzf DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    find DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38 -name "*.txt" | sort --version-sort | xargs -n1 cat  | sed '2,${{/^Chr/d}}' > {output}
    rm -f DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    """

## ==== HapMap Recombination Map 
hapmap_files = [f"HapMapII_GRCh37_liftedOverTo_Hg38/genetic_map_Hg38_{chrom}.txt" for chrom in AUTOS ]
hapmap = ["hapmap_genetic_map.txt"]

rule download_hapmap:
  output: "hapmap_genetic_map.txt"
  shell:
    """
    wget https://stdpopsim.s3.us-west-2.amazonaws.com/genetic_maps/HomSap/HapMapII_GRCh38.tar.gz
    mkdir -p HapMapII_GRCh37_liftedOverTo_Hg38
    tar -xvzf HapMapII_GRCh38.tar.gz --directory HapMapII_GRCh37_liftedOverTo_Hg38

    find HapMapII_GRCh37_liftedOverTo_Hg38 -name "*.txt" | sort --version-sort | xargs -n1 cat  | sed '2,${{/^Chr/d}}' > {output}
    rm -f HapMapII_GRCh38.tar.gz
    """

rule chrom_maplens:
  output: "hapmap_chrom_maplens.bed"
  input: genmap="hapmap_genetic_map.txt", seqlens="hg38_seqlens.tsv"
  run:
    from bgspy.recmap import RecMap
    map = RecMap(input[0])

 

## === Conservation Tracks
cons = ["conserved_phastcons.bed.gz",

        # feature tracks with genomic elements only
        "conserved_cds_phastcons.bed.gz",
        "conserved_cds_phastcons_merged.bed.gz",
        "conserved_cds_utrs_phastcons.bed.gz",
        "conserved_cds_utrs.bed.gz",
        "conserved_cds_utrs_promoters2kb.bed.gz",

        # with encode regulatory elements
        "conserved_cds_utrs_regulatory_phastcons.bed.gz",

        # simplified phastcons -- merged 100bp adjacent
        "conserved_cds_utrs_phastcons_simplified.bed.gz",

        # full-coverage feature tracks
        "conserved_cds_utrs_phastcons_full.bed.gz",
        "conserved_cds_utrs_regulatory_phastcons_full.bed.gz",

        # with introns
        "conserved_cds_utrs_introns_phastcons.bed.gz",
        "conserved_cds_utrs_introns.bed.gz",
        "conserved_cds_utrs_introns_promoters2kb.bed.gz",

        # merged and unlabelled (e.g. treated as all one feature type, 
        # for sims and model comparison)
        "conserved_cds_utrs_phastcons_merged.bed.gz",
] 

# this is used for sims with combined conserved regions (phastcons)
rule conserved_track:
  input: phastcons="phastConsElements100way.bed.gz"
  output: "conserved_phastcons.bed.gz"
  shell: 
      """
      # combine the files, sort and merge overlapping tracks
      # the messy grep filters out alt chromosome
      (zcat {input.phastcons} | \
        bioawk -t '{{ print $1,$2,$3,"phastcons" }}') | grep -P "^chr[0-9]+\t" | \
        sort  --version-sort -k 1,1 -k2,2n | \
        bedtools merge | gzip > {output}
      """

rule split_conserved_track:
  input: "conserved_phastcons.bed.gz"
  output: "conserved_phastcons/{chrom}.bed"
  shell:
    """
    zgrep "^{wildcards.chrom}" {input} > {output[0]}
    """

# this is used for sims with combined conserved regions (phastcons)
rule phastcons_simplified:
  input: "conserved_phastcons.bed.gz"
  output: "conserved_phastcons_simplified.bed.gz"
  shell: 
      """
      bedtools merge -d 100 -i {input} | gzip > {output}
      """

rule conserved_cds_phastcons:
  input: cds="hg38.ensembl_cds.bed.gz", phastcons="conserved_phastcons.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_phastcons.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} --bed phastcons {input.phastcons} | \
      gzip > {output}
    """

rule cds_no_phastcons:
  input: cds="hg38.ensembl_cds.bed.gz", phastcons="conserved_phastcons.bed.gz"
  output: "cds_no_phastcons.bed.gz"
  shell:
    """
    bedtools subtract -a {input.cds} -b {input.phastcons} | gzip > {output[0]}
    """

rule conserved_cds_phastcons_merged:
  input: "conserved_cds_phastcons.bed.gz"
  output: "conserved_cds_phastcons_merged.bed.gz"
  shell:
    """
    zcat {input[0]} | cut -f1,2,3 | gzip > {output}
    """


rule conserved_cds_utrs_regulatory_phastcons:
  input: cds="hg38.ensembl_cds.bed.gz", utrs="hg38.ensembl_utrs.bed.gz", phastcons="conserved_phastcons.bed.gz", regulatory="hg38.regulatory.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_regulatory_phastcons.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} --bed utr {input.utrs} \
      --bedfile {input.regulatory} \
      --bed phastcons {input.phastcons} | \
      gzip > {output}
    """



rule conserved_cds_utrs_phastcons:
  input: cds="hg38.ensembl_cds.bed.gz", utrs="hg38.ensembl_utrs.bed.gz", phastcons="conserved_phastcons.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_phastcons.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} --bed utr {input.utrs} --bed phastcons {input.phastcons} | \
      gzip > {output}
    """

# the simplified tracks combine phastcons regions 100bp apart
rule conserved_cds_utrs_phastcons_simplified:
  input: cds="hg38.ensembl_cds.bed.gz", utrs="hg38.ensembl_utrs.bed.gz", phastcons="conserved_phastcons_simplified.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_phastcons_simplified.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} --bed utr {input.utrs} --bed phastcons {input.phastcons} | \
      gzip > {output}
    """

rule conserved_cds_utrs_regulatory_phastcons_simplified:
  input: cds="hg38.ensembl_cds.bed.gz", utrs="hg38.ensembl_utrs.bed.gz", phastcons="conserved_phastcons_simplified.bed.gz", regulatory="hg38.regulatory.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_regulatory_phastcons_simplified.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed cds {input.cds} --bed utr {input.utrs} \
      --bedfile {input.regulatory}  \
      --bed phastcons {input.phastcons} | \
      gzip > {output}
    """


rule conserved_cds_utrs_phastcons_full:
  input: cons="conserved_cds_utrs_phastcons_simplified.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_phastcons_full.bed.gz"
  shell:
    """
    bedtools complement -i {input.cons} -g {input.seqlens} | bioawk -t '{{print $0,"other"}}' > conserved_cds_utrs_phastcons_complement.bed
    (cat conserved_cds_utrs_phastcons_complement.bed; zcat {input.cons}) | sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """


rule conserved_cds_utrs_regulatory_phastcons_full:
  input: cons="conserved_cds_utrs_regulatory_phastcons_simplified.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_regulatory_phastcons_full.bed.gz"
  shell:
    """
    bedtools complement -i {input.cons} -g {input.seqlens} | bioawk -t '{{print $0,"other"}}' > conserved_cds_utrs_regulatory_phastcons_complement.bed
    (cat conserved_cds_utrs_regulatory_phastcons_complement.bed; zcat {input.cons}) | sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """


rule conserved_cds_utrs:
  input: cds="hg38.ensembl_cds.bed.gz", utrs="hg38.ensembl_utrs.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed utr {input.utrs} --bed cds {input.cds} | \
      gzip > {output}
    """

rule conserved_cds_utrs_promoters2kb:
  input: cds="hg38.ensembl_cds.bed.gz", utrs="hg38.ensembl_utrs.bed.gz", promoters="hg38.ensembl_promoters_2kb.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_promoters2kb.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed utr {input.utrs} --bed cds {input.cds} \
      --bed promoter {input.promoters} | \
      gzip > {output}
    """

rule conserved_cds_utrs_introns:
  input: cds="hg38.ensembl_cds.bed.gz", utrs="hg38.ensembl_utrs.bed.gz", introns="hg38.ensembl_introns.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_introns.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed utr {input.utrs} --bed intron {input.introns} --bed cds {input.cds}  | \
      gzip > {output}
    """

rule conserved_cds_utrs_introns_promoters2kb:
  input: cds="hg38.ensembl_cds.bed.gz", utrs="hg38.ensembl_utrs.bed.gz", introns="hg38.ensembl_introns.bed.gz", promoters="hg38.ensembl_promoters_2kb.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_introns_promoters2kb.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed utr {input.utrs} --bed cds {input.cds} --bed intron {input.introns} \
      --bed promoter {input.promoters} | \
      gzip > {output}
    """


rule conserved_cds_utrs_introns_phastcons:
  input: cds="hg38.ensembl_cds.bed.gz", utrs="hg38.ensembl_utrs.bed.gz", introns="hg38.ensembl_introns.bed.gz", phastcons="conserved_phastcons.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_introns_phastcons.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed utr {input.utrs} --bed intron {input.introns} --bed cds {input.cds} \
      --bed phastcons {input.phastcons} | \
      gzip > {output}
    """

rule conserved_cds_utrs_phastcons_merged:
  input: utrs="hg38.ensembl_utrs.bed.gz", cds="hg38.ensembl_cds.bed.gz", phastcons="conserved_phastcons.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_cds_utrs_phastcons_merged.bed.gz"
  shell:
    """
    python ../../tools/combine_features.py --seqlens {input.seqlens} \
      --bed utr {input.utrs} --bed cds {input.cds} \
      --bed phastcons {input.phastcons} | \
      cut -f1-3 | \
      gzip > {output}
    """

## === Simplified Annotation Tracks for Sims
# we want simple, example conservation tracks, but semi-realistic, e.g. CDS
sim_cons = ["conserved_phastcons_chr10.bed",  # this is currently the primary conserved track for simulations
            "conserved_cds_utrs_phastcons_merged_chr10.bed",
            "conserved_cds_phastcons_merged_chr10.bed",
            ]
sim_neut = ["neutral_phastcons_chr10.bed.gz"]

# sepearate out conserved tracks into separate chromosome files
rule split_phastcons:
  input: "conserved_phastcons.bed.gz"
  output: "conserved_phastcons_chr10.bed"
  shell:
      """
      zgrep "chr10" {input} > {output}
      """

rule split_merged_noutr:
  input: "conserved_cds_phastcons_merged.bed.gz"
  output: "conserved_cds_phastcons_merged_chr10.bed"
  shell:
      """
      zgrep "chr10" {input} | cut -f1-3 > {output}
      mkdir -p calc_bkgd_conserved/ && cp conserved_cds_phastcons_merged_chr10.bed calc_bkgd_conserved/chr10.bed
      """

rule split_merged:
  input: "conserved_cds_utrs_phastcons_merged.bed.gz"
  output: "conserved_cds_utrs_phastcons_merged_chr10.bed"
  shell:
      """
      zgrep "chr10" {input} | cut -f1-3 > {output}
      mkdir -p calc_bkgd_conserved/ && cp conserved_cds_utrs_phastcons_merged_chr10.bed calc_bkgd_conserved/chr10.bed
      """

rule sim_neutral:
   # for the only phastcons-only sims
   input: conserved="conserved_phastcons_chr10.bed", seqlens="hg38_seqlens.tsv"
   output: "neutral_phastcons_chr10.bed.gz"
   shell:
      """
       cut -f1-3 {input.conserved} | \
       sort --version-sort -k1,1 -k2,2n | \
       bedtools merge | \
       grep chr10 | \
       bedtools complement -L -i - -g {input.seqlens} | \
       gzip > {output}
      """

## === Calcbkgd files
calc_bkgd = ["hg38_chr10_seqlens.tsv", "conserved_phastcons/chr10.bed"]
# only chr10
rule seqlens_chr10:
  input: "hg38_seqlens.tsv"
  output: "hg38_chr10_seqlens.tsv"
  shell:
    """
      grep "chr10" {input} > {output}
    """

rule chr10_conserved:
  input: "conserved_phastcons_chr10.bed"
  output: "conserved_phastcons/chr10.bed"
  shell:
    """
    mkdir -p conserved_phastcons
    cp {input} conserved_phastcons/chr10.bed
    """


## === Accessible Regions
accessible = ["no_centro.bed"]

rule no_centro:
  input: centro="hg38_centro_slop.bed", seqlens="hg38_seqlens.tsv"
  output: "no_centro.bed"
  shell:
    """
    bedtools complement -i {input.centro} -g {input.seqlens} > {output}
    """

## === Neutral Regions
neutral = ["neutral_phastcons_genes_chr10.bed", "neutral_phastcons_genes.bed.gz"]

# Putatively neutral regions -- here we merge all phastcons and genes.
# Note, the last step is to take the complement of the conserved regions = putatively netural regions
# Importantly, below, we add in introns since these are neutralish-ish and make up a huge part of the 
# human genome.
rule neutral:
   input: conserved="phastConsElements100way.bed.gz", genes="hg38.ensembl_genes.bed.gz", seqlens="hg38_seqlens.tsv"
   output: "neutral_phastcons_genes.bed.gz"
   shell:
      """
      zcat {input.conserved} {input.genes} | \
       cut -f1-3 | \
       sort --version-sort -k1,1 -k2,2n | \
       bedtools slop -g {input.seqlens} -b 1000  | \
       bedtools merge | \
       bedtools complement -i - -g {input.seqlens} | gzip > {output}
      """

rule neutral_introns:
   # we add back in the introns as these make up ~40% of the genome and are neutralish
   input: neut="neutral_phastcons_genes.bed.gz", intron="hg38.ensembl_introns_conservative.bed.gz"
   output: "neutral_phastcons_genes_with_introns.bed.gz"
   shell:
     """
     zcat {input.neut} {input.intron} | sort --version-sort -k1,1 -k2,2n | \
      gzip > {output}
     """

# putatively neutral regions for sims, only chr10, simply features -- not conserved tracks 
rule neutral_chr10:
   input: conserved="neutral_phastcons_genes.bed.gz", seqlens="hg38_seqlens.tsv"
   output: "neutral_phastcons_genes_chr10.bed"
   shell:
      """
      bedtools complement -i {input.conserved} -g {input.seqlens} | grep "^chr10" > {output}
      """

rec = decode + hapmap 

## === Other Data (e.g. GWAS catalog)
other = ["gwas_catalog.tsv"]
rule gwsascat:
  output: "gwas_catalog.tsv"
  shell: 
     """
     wget -O {output[0]} https://www.ebi.ac.uk/gwas/api/search/downloads/full
     """

## === Main target
rule all:
  input: annot + rec + cons + sim_cons + neutral + accessible + genome + sim_neut + calc_bkgd + other


