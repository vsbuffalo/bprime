
AUTOS = list(range(1, 23))
AUTOSEX = AUTOS + ['X', 'Y']
PHASTCONS_THRESH = 526


## === Human Annotation Data
annot = ["hg38_seqlens.tsv", "phastConsElements100way.txt.gz", "phastConsElements100way.bed.gz", 
         "hg38.ncbiRefSeq_cds.bed.gz", 
         "hg38_centro.bed", 
         "ensembl_pseudogenes.bed.gz"]

# only keep autosomes
rule seqlens:
  output: "hg38_seqlens.tsv"
  shell:
    """
    curl https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.chrom.sizes | \
      grep -v '_' | grep -v 'chrM' | \
      sort --version-sort -k1,1 -k2,2n > {output}
    """

rule centro:
  output: "hg38_centro.bed"
  shell:
    """
    curl http://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/cytoBand.txt.gz | zgrep "acen" | sort --version-sort -k1,1 -k2,2n > {output}
    """

rule centro_slop:
  output: "hg38_centro_slop.bed"
  input: centro="hg38_centro.bed", seqlens="hg38_seqlens.tsv"
  shell:
    """
    bedtools slop -g {input.seqlens} -b 10000000 -i {input.centro} > {output}
    """

rule phastcons:
  output: "phastConsElements100way.txt.gz"
  shell:
    """
    curl http://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/phastConsElements100way.txt.gz 
    """

rule phastcons_bed:
  output: "phastConsElements100way.bed.gz"
  input: "phastConsElements100way.txt.gz"
  params: thresh=PHASTCONS_THRESH
  shell:
    """
     # Filter the phastcons by a score constant
     zcat {input} | bioawk -t ' $6 > {params.thresh} {{ print $2,$3,$4 }}' | gzip > {output}
    """

rule ensembl_gff:
   output: "Homo_sapiens.GRCh38.107.gff3.gz"
   shell:
     """ 
     wget http://ftp.ensembl.org/pub/release-107/gff3/homo_sapiens/Homo_sapiens.GRCh38.107.gff3.gz
     """

rule ensembl_pseudogenes:
   output: "ensembl_pseudogenes.bed.gz"
   input: "Homo_sapiens.GRCh38.107.gff3.gz"
   shell:
     """
     zgrep -v "#" {input} | bioawk -cgff ' $feature ~ /pseudogene/ {{ print "chr"$seqname,$start,$end,$feature }}' | \
      sort --version-sort -k1,1 -k2,2n |  \
      bedtools merge -c 4 -o distinct | sort --version-sort -k1,1 -k2,2n | gzip > {output}
     """

rule refseq:
  output: "hg38.ncbiRefSeq.gtf.gz"
  shell:
    """
    wget https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/genes/hg38.ncbiRefSeq.gtf.gz
    """

rule cds:
  output: "hg38.ncbiRefSeq_cds.bed.gz"
  input: "hg38.ncbiRefSeq.gtf.gz"
  shell:
    """
      bioawk -cgff '{{ if ($feature == "CDS") {{ print $seqname,$start,$end,$feature }} }}' {input} | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule cds_utr:
  output: "hg38.ncbiRefSeq_cds_utrs.bed.gz"
  input: "hg38.ncbiRefSeq.gtf.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /CDS|5UTR|3UTR/ {{ print $seqname,$start,$end,$feature }}' {input} | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """


## === Genomic Windows
rule human_100kb:
  output: "hg38_100kb.bed"
  input: "hg38_seqlens.tsv"
  shell:
     """
     bedtools makewindows -g {input}  -w 100000 > {output}
     """


## === Human Recombination Maps

## ==== DeCode Recombination Map
decode = ["decode_sex_averaged.txt"]
rule decode_map:
  output: "decode_sex_averaged.txt"
  shell:
    """
    #wget https://www.decode.com/additional/sex-averaged.rmap
    wget https://stdpopsim.s3.us-west-2.amazonaws.com/genetic_maps/HomSap/DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    tar -xvzf DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    find DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38 -name "*.txt" | sort --version-sort | xargs -n1 cat  | sed '2,${{/^Chr/d}}' > {output}
    rm -f DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    """

## ==== HapMap Recombination Map 
hapmap_files = [f"HapMapII_GRCh37_liftedOverTo_Hg38/genetic_map_Hg38_{chrom}.txt" for chrom in AUTOS ]
hapmap = ["hapmap_genetic_map.txt"]

rule download_hapmap:
  output: "hapmap_genetic_map.txt"
  shell:
    """
    wget https://stdpopsim.s3.us-west-2.amazonaws.com/genetic_maps/HomSap/HapMapII_GRCh37_liftedOverTo_Hg38.tar.gz
    tar -xvzf HapMapII_GRCh37_liftedOverTo_Hg38.tar.gz

    find HapMapII_GRCh37_liftedOverTo_Hg38 -name "*.txt" | sort --version-sort | xargs -n1 cat  | sed '2,${{/^Chr/d}}' > {output}
    rm -f HapMapII_GRCh37_liftedOverTo_Hg38.tar.gz
    """

## === Simplified Annotation Tracks for Sims
# we want simple, example conservation tracks, but semi-realistic, e.g. CDS
conserved_tracks_slop = [f"conserved_by_chrom/chr{chrom}.bed" for chrom in AUTOS]

# this one is to test the multiple features 
conserved_tracks = [f"conserved_by_chrom_features/chr{chrom}.bed" for chrom in AUTOS]

cons = ["conserved.bed.gz", "conserved_cds_phastcons_utrs.bed.gz", "conserved_slop.bed.gz"] + conserved_tracks

# this is used for sims with combined conserved regions (phastcons + CDS)
rule conserved_track:
  input: cds="hg38.ncbiRefSeq_cds.bed.gz", phastcons="phastConsElements100way.bed.gz"
  output: "conserved.bed.gz"
  shell: 
      """
      # combine the files, sort and merge overlapping tracks
      (zcat {input.cds}; (zcat {input.phastcons} | \
        # the messy grep filters out alt chromosome
        bioawk -t '{{ print $1,$2,$3,"phastcons" }}')) | grep -w '^#\|chr[1-9]\|chr[1-2][0-9]\|chr[XY]' | \
        sort  --version-sort -k 1,1 -k2,2n | \
        bedtools merge  -c 4 -o distinct | \
        python ../../tools/simplify_cons_bed.py | \
        gzip > {output}
      """
        
# simple features (phastcons + cds )
rule conserved_track_sipmle:
  input: cds="hg38.ncbiRefSeq_cds.bed.gz", phastcons="phastConsElements100way.bed.gz"
  output: "conserved_cds_phastcons.bed.gz"
  shell: 
      """
      # combine the files, sort and merge overlapping tracks
      # the messy grep filters out alt chromosome
      (zcat {input.cds} ; (zcat {input.phastcons} | \
        bioawk -t '{{ print $1,$2,$3,"phastcons" }}')) | grep -w '^#\|chr[1-9]\|chr[1-2][0-9]\|chr[XY]' | \
        sort  --version-sort -k 1,1 -k2,2n | \
        bedtools merge  -c 4 -o distinct | \
        python ../../tools/simplify_cons_bed.py | gzip > {output}
      """


# most features (phastcons + CDS + UTRs)
rule conserved_track_features:
  input: cds="hg38.ncbiRefSeq_cds_utrs.bed.gz", phastcons="phastConsElements100way.bed.gz"
  output: "conserved_cds_phastcons_utrs.bed.gz"
  shell: 
      """
      # combine the files, sort and merge overlapping tracks
      # the messy grep filters out alt chromosome
      (zcat {input.cds} ; (zcat {input.phastcons} | \
        bioawk -t '{{ print $1,$2,$3,"phastcons" }}')) | grep -w '^#\|chr[1-9]\|chr[1-2][0-9]\|chr[XY]' | \
        sort  --version-sort -k 1,1 -k2,2n | \
        bedtools merge  -c 4 -o distinct | \
        sed 's/5UTR/UTR/' | sed 's/3UTR/UTR/' | \
        python ../../tools/simplify_cons_bed.py | \
        gzip > {output}
      """

# full features (phastcons + CDS + UTRs + pseudogenes)
rule conserved_track_full:
  input: cds="hg38.ncbiRefSeq_cds_utrs.bed.gz", phastcons="phastConsElements100way.bed.gz", pseudogene="ensembl_pseudogenes.bed.gz"
  output: "conserved_cds_phastcons_utrs_pseudo.bed.gz"
  shell: 
      """
      # combine the files, sort and merge overlapping tracks
      # the messy grep filters out alt chromosome
      (zcat {input.cds} {input.pseudogene}; (zcat {input.phastcons} | \
        bioawk -t '{{ print $1,$2,$3,"phastcons" }}')) | grep -w '^#\|chr[1-9]\|chr[1-2][0-9]\|chr[XY]' | \
        sort  --version-sort -k 1,1 -k2,2n | \
        bedtools merge  -c 4 -o distinct | \
        sed 's/5UTR/UTR/' | sed 's/3UTR/UTR/' | \
        python ../../tools/simplify_cons_bed.py | \
        gzip > {output}
      """
 
rule conserved_slop:
  output: "conserved_slop.bed.gz"
  input: conserved="conserved.bed.gz", seqlens="hg38_seqlens.tsv"
  shell:
     """
     zgrep -P "^chr[0-9]+\t" {input.conserved} | sort --version-sort -k 1,1 -k2,2n | \
       bedtools slop -g {input.seqlens} -b 1000 | bedtools merge -d 2  | gzip > {output}
     """

# sepearate out conserved tracks into separate chromosome files
rule split_conserved_slop:
  output: conserved_tracks_slop
  input: "conserved_slop.bed.gz"
  shell:
      """
      mkdir -p conserved_by_chrom/
      for i in $(seq 1 22); do zgrep -P "chr$i\t" {input} > conserved_by_chrom/chr$i.bed; done
      """

# sepearate out conserved tracks into separate chromosome files
rule split_conserved:
  output: conserved_tracks
  input: "conserved_cds_phastcons.bed.gz"
  shell:
      """
      mkdir -p conserved_by_chrom_features/
      for i in $(seq 1 22); do zgrep -P "chr$i\t" {input} > conserved_by_chrom_features/chr$i.bed; done
      """

## === Accessible Regions

accessible = ["no_centro.bed"]

rule no_centro:
  input: centro="hg38_centro_slop.bed", seqlens="hg38_seqlens.tsv"
  output: "no_centro.bed"
  shell:
    """
    bedtools complement -i {input.centro} -g {input.seqlens} > {output}
    """

## === Neutral Regions
neutral = ["neutral_chr10.bed", "neutral_cds_phastcons.bed"]

# putatively neutral regions -- not conserved tracks
rule neutral:
   output: "neutral_cds_phastcons.bed"
   input: conserved="conserved_cds_phastcons.bed.gz", seqlens="hg38_seqlens.tsv"
   shell:
      """
      bedtools slop -g {input.seqlens} -b 10000 -i {input.conserved} | \
       bedtools complement -i - -g {input.seqlens} > {output}
      """

# putatively neutral regions for sims, only chr10, simply features -- not conserved tracks 
rule neutral_chr10:
   output: "neutral_chr10.bed"
   input: conserved="conserved_by_chrom/chr10.bed", seqlens="hg38_seqlens.tsv"
   shell:
      """
      bedtools complement -i {input.conserved} -g {input.seqlens} | grep "^chr10" > {output}
      """

rec = decode + hapmap 
print(rec)

## === Main target
rule all:
  input: annot + rec + cons + neutral + accessible


