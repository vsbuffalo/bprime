
AUTOS = list(range(1, 23))
AUTOSEX = AUTOS + ['X', 'Y']
PHASTCONS_THRESH_10 = 471
PHASTCONS_THRESH_5 = 527

## === Human genome data

genome = ["hg38.fa.gz"]

rule hg38:
  output: "hg38.fa.gz"
  shell:
    """
    wget -O {output} http://ftp.ensembl.org/pub/release-107/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz
    """

# only keep autosomes
rule seqlens:
  input: "hg38.fa.gz"
  output: "hg38_seqlens.tsv"
  shell:
    """
      bioawk -cfastx '{{ print $name,length($seq) }}' hg38.fa.gz | \
      sed 's/^/chr/' | grep -P '^chr[0-9XY]+' |  \
      sort  --version-sort -k 1,1 -k2,2n > {output}
    """


## === Human Annotation Data
annot = ["hg38_seqlens.tsv", "phastConsElements100way.txt.gz", 
         "hg38.ensembl.gff3.gz",
         "hg38.ensembl_cds.bed.gz", 
         "hg38.ensembl_genes.bed.gz", "hg38_centro.bed", "ensembl_pseudogenes.bed.gz",
         "hg38.ensembl_exons.bed.gz", "hg38.ensembl_utrs.bed.gz", 
         "hg38.ensembl_introns_conservative.bed.gz", "hg38.ensembl_introns.bed.gz", 
         "neutral_phastcons_genes_with_introns.bed.gz"]

rule centro:
  output: "hg38_centro.bed"
  shell:
    """
    curl http://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/cytoBand.txt.gz | zgrep "acen" | sort --version-sort -k1,1 -k2,2n > {output}
    """

rule centro_slop:
  output: "hg38_centro_slop.bed"
  input: centro="hg38_centro.bed", seqlens="hg38_seqlens.tsv"
  shell:
    """
    bedtools slop -g {input.seqlens} -b 1000000 -i {input.centro} | sort --version-sort -k1,1 -k2,2n > {output}
    """

rule phastcons:
  output: "phastConsElements100way.txt.gz"
  shell:
    """
    # also, remove alt chroms
    curl http://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/phastConsElements100way.txt.gz  | \
      zgrep -P '^chr[0-9XY]+\t' | \
      gzip > {output}
    """

rule phastcons_bed:
  output: "phastConsElements100way.bed.gz"
  input: "phastConsElements100way.txt.gz"
  shell:
    """
     zcat {input} | bioawk -t '{{ print $2,$3,$4 }}' | sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule phastcons_bed_filtered:
  output: "phastConsElements100way_thresh{thresh}.bed.gz"
  input: "phastConsElements100way.txt.gz"
  shell:
    """
     # Remove alt chroms and filter the phastcons by a score constant
     zcat {input} | bioawk -t ' $6 > {wildcards.thresh} {{ print $2,$3,$4 }}' | sort --version-sort -k1,1 -k2,2n |  gzip > {output}
    """

rule ensembl_gff:
  output: "hg38.ensembl.gff3.gz"
  shell:
     """
     curl http://ftp.ensembl.org/pub/release-107/gff3/homo_sapiens/Homo_sapiens.GRCh38.107.chr.gff3.gz | \
       zgrep -v '^#' | sed s/^/chr/ | \
       grep -P '^chr[0-9XY]+' | \
       gzip > {output}
     """

rule ensembl_pseudogenes:
   input: "hg38.ensembl.gff3.gz"
   output: "ensembl_pseudogenes.bed.gz"
   shell:
     """
     zgrep -v "#" {input} | bioawk -cgff ' $feature ~ /^pseudogene$/ {{ print "chr"$seqname,$start,$end,$feature }}' | \
      sort --version-sort -k1,1 -k2,2n |  \
      bedtools merge -c 4 -o distinct | sort --version-sort -k1,1 -k2,2n | gzip > {output}
     """

rule genes:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_genes.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /^gene$/ {{ print $seqname,$start,$end,$feature }} ' {input} | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule exons:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_exons.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /^exon$/ {{ print $seqname,$start,$end,$feature }} ' {input} | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule exons_merged:
  input: "hg38.ensembl_exons.bed.gz"
  output: "hg38.ensembl_exons_merged.bed.gz"
  shell:
    """
      bedtools merge -i {input} > {output}
    """

rule cds:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_cds.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /^CDS$/ {{ print $seqname,$start,$end,$feature }} ' {input} | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule utrs:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_utrs.bed.gz"
  shell:
    """
      bioawk -cgff ' $feature ~ /5UTR|3UTR/ {{ print $seqname,$start,$end,$feature }}' {input} | \
      sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

rule introns:
  input: genes="hg38.ensembl_genes.bed.gz", utr="hg38.ensembl_utrs.bed.gz", exon="hg38.ensembl_exons_merged.bed.gz"
  output: "hg38.ensembl_introns.bed.gz"
  shell:
    """
    zcat {input.genes} | cut -f1-3 | bedtools merge | \
     bedtools subtract -a - -b {input.exon} | bedtools subtract -a -  -b {input.utr} | \
     gzip > {output}
    """

rule introns_conservative:
  # take the introns and shrink them by 20bp, since 
  # splicing may conserve this -- a buffer
  input: "hg38.ensembl_introns.bed.gz"
  output: "hg38.ensembl_introns_conservative.bed.gz"
  params: buffer=20
  shell:
    """
    bioawk -cbed '{{ $start = $start - {params.buffer}; $end = $end - {params.buffer}; if ($end > $start) {{ print; }} }}' {input} |  gzip > {output}
    """


## === Genomic Windows
rule human_100kb:
  output: "hg38_100kb.bed"
  input: "hg38_seqlens.tsv"
  shell:
     """
     bedtools makewindows -g {input}  -w 100000 > {output}
     """


## === Human Recombination Maps

## ==== DeCode Recombination Map
decode = ["decode_sex_averaged.txt"]
rule decode_map:
  output: "decode_sex_averaged.txt"
  shell:
    """
    #wget https://www.decode.com/additional/sex-averaged.rmap
    wget https://stdpopsim.s3.us-west-2.amazonaws.com/genetic_maps/HomSap/DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    tar -xvzf DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    find DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38 -name "*.txt" | sort --version-sort | xargs -n1 cat  | sed '2,${{/^Chr/d}}' > {output}
    rm -f DeCodeSexAveraged_GRCh36_liftedOverTo_Hg38.tar.gz
    """

## ==== HapMap Recombination Map 
hapmap_files = [f"HapMapII_GRCh37_liftedOverTo_Hg38/genetic_map_Hg38_{chrom}.txt" for chrom in AUTOS ]
hapmap = ["hapmap_genetic_map.txt"]

rule download_hapmap:
  output: "hapmap_genetic_map.txt"
  shell:
    """
    wget https://stdpopsim.s3.us-west-2.amazonaws.com/genetic_maps/HomSap/HapMapII_GRCh37_liftedOverTo_Hg38.tar.gz
    tar -xvzf HapMapII_GRCh37_liftedOverTo_Hg38.tar.gz

    find HapMapII_GRCh37_liftedOverTo_Hg38 -name "*.txt" | sort --version-sort | xargs -n1 cat  | sed '2,${{/^Chr/d}}' > {output}
    rm -f HapMapII_GRCh37_liftedOverTo_Hg38.tar.gz
    """

## === Conservation Tracks
cons = ["conserved_phastcons_thresh471.bed.gz", 
        "conserved_phastcons_thresh527.bed.gz", 
        "conserved_phastcons_thresh0.bed.gz", 
        "conserved_phastcons_thresh0_slop1k.bed.gz", 
        "conserved_phastcons_thresh471_slop1k.bed.gz", 
        "conserved_phastcons_thresh527_slop1k.bed.gz"] 

# this is used for sims with combined conserved regions (phastcons)
rule conserved_track:
  input: phastcons="phastConsElements100way_thresh{thresh}.bed.gz"
  output: "conserved_phastcons_thresh{thresh}.bed.gz"
  shell: 
      """
      # combine the files, sort and merge overlapping tracks
      # the messy grep filters out alt chromosome
      (zcat {input.phastcons} | \
        bioawk -t '{{ print $1,$2,$3,"phastcons" }}') |  -P "^chr[0-9]+\t" | \
        sort  --version-sort -k 1,1 -k2,2n | \
        bedtools merge | gzip > {output}
      """

rule conserved_slop:
  input: conserved="conserved_phastcons_thresh{thresh}_slop1k.bed.gz", seqlens="hg38_seqlens.tsv"
  output: "conserved_phastcons_thresh{thresh}_slop1k.bed.gz"
  shell:
     """
     zgrep -P "^chr[0-9]+\t" {input.conserved} | sort --version-sort -k 1,1 -k2,2n | \
       bedtools slop -g {input.seqlens} -b 1000 | bedtools merge -d 2  | gzip > {output}
     """

## === Simplified Annotation Tracks for Sims
# we want simple, example conservation tracks, but semi-realistic, e.g. CDS
sim_cons = ["conserved_phastcons_thresh471_slop1k_chr10.bed", 
            "conserved_phastcons_thresh527_slop1k_chr10.bed", 
            "conserved_phastcons_thresh0_slop1k_chr10.bed"]

# sepearate out conserved tracks into separate chromosome files
rule split_conserved:
  output: "conserved_phastcons_thresh{thresh}_slop1k_chr10.bed"
  input: "conserved_phastcons_thresh{thresh}_slop1k.bed.gz"
  shell:
      """
      zgrep "chr10" {input} > {output}
      """

## === Accessible Regions
accessible = ["no_centro.bed"]

rule no_centro:
  input: centro="hg38_centro_slop.bed", seqlens="hg38_seqlens.tsv"
  output: "no_centro.bed"
  shell:
    """
    bedtools complement -i {input.centro} -g {input.seqlens} > {output}
    """

## === Neutral Regions
neutral = ["neutral_phastcons_genes_chr10.bed", "neutral_phastcons_genes.bed.gz"]

# putatively neutral regions -- not conserved tracks
# this uses the unfiltered phastcons file -- maximum chance of being neutral
# also, all genes are added in
# note, the last step is the complement
rule neutral:
   input: conserved="phastConsElements100way.bed.gz", genes="hg38.ensembl_genes.bed.gz", seqlens="hg38_seqlens.tsv"
   output: "neutral_phastcons_genes.bed.gz"
   shell:
      """
      zcat {input.conserved} {input.genes} | \
       cut -f1-3 | \
       sort --version-sort -k1,1 -k2,2n | \
       bedtools slop -g {input.seqlens} -b 1000  | \
       bedtools merge | \
       bedtools complement -i - -g {input.seqlens} | gzip > {output}
      """

rule neutral_introns:
   input: neut="neutral_phastcons_genes.bed.gz", intron="hg38.ensembl_introns_conservative.bed.gz"
   output: "neutral_phastcons_genes_with_introns.bed.gz"
   shell:
     """
     zcat {input.neut} {input.intron} | sort --version-sort -k1,1 -k2,2n | \
      gzip > {output}
     """

# putatively neutral regions for sims, only chr10, simply features -- not conserved tracks 
rule neutral_chr10:
   input: conserved="neutral_phastcons_genes.bed.gz", seqlens="hg38_seqlens.tsv"
   output: "neutral_phastcons_genes_chr10.bed"
   shell:
      """
      bedtools complement -i {input.conserved} -g {input.seqlens} | grep "^chr10" > {output}
      """

rec = decode + hapmap 

## === Main target
rule all:
  input: annot + rec + cons + sim_cons + neutral + accessible + genome


