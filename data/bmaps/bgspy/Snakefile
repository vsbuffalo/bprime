from os.path import join
import json
import numpy as np
from bgspy.models import BGSModel 
from bgspy.genome import Genome

#NCORES = 70
NCORES = 40
NCORES_BP = 20

AA_RECMAP = "../../annotation/aamap_hg38.tsv"

# ===== For Simulations =====
# 
# Note: for next sim run, just use grid-string params, perhaps 
# non phastcons track.
#
CONFIG = '../../../slim_sims/chrombgs/chrombgs_chr10_cds_utrs_phastcons.json'

chr10_sim_config = json.load(open(CONFIG))
print(chr10_sim_config)

# note: only the file stem is in the value, rest denotes chrom
cons_track = chr10_sim_config['cons_track'] + '_chr10.bed'
Ns = chr10_sim_config['params']['N']['grid']
assert(len(Ns) == 1)
sims_N = Ns[0]
# for w/t arguments to CL
t = ','.join(map(str, chr10_sim_config['params']['sh']['grid']))
w = ','.join(map(str, chr10_sim_config['params']['mu']['grid']))

rule bmap_chr10:
  input: annot=join("../../annotation/",  cons_track),
         seqlens_file="../../annotation/hg38_seqlens.tsv", 
         recmap="../../annotation/HapMapII_GRCh37_liftedOverTo_Hg38/genetic_map_Hg38_chr10.txt"
  output: pkl_b_file="bmap_hg38_sims_{step,\d+}step_chr10.pkl"
  params: ncores=NCORES, ncores_bp=NCORES_BP, popsize=sims_N, t=t, w=w
  shell:
    """
    python ../../../bgspy/command_line.py calcb \
      --recmap {input.recmap} --annot {input.annot} \
      --seqlens {input.seqlens_file} \
      --t {params.t} \
      --w {params.w} \
      --output {output} --popsize {params.popsize} --chrom chr10 \
      --ncores {params.ncores} --ncores-Bp {params.ncores_bp} \
      --step {wildcards.step}
    """


## this is a rescaled-version, for some sets of parameters
rule bmap_chr10_rescale:
  input: annot=join("../../annotation/",  cons_track),
         seqlens_file="../../annotation/hg38_seqlens.tsv", 
         recmap="../../annotation/HapMapII_GRCh37_liftedOverTo_Hg38/genetic_map_Hg38_chr10.txt",
	 pkl_b_file="bmap_hg38_sims_{step,\d+}step_chr10.pkl"
  output: pkl_rsb_file= "rescaled_grid/bmap_rescaled_hg38_sims_{w}w_{t}t_{step,\d+}step_chr10.pkl"
  params: ncores=NCORES, ncores_bp=NCORES_BP, popsize=sims_N, t=t, w=w
  shell:
    """
    python ../../../bgspy/command_line.py calcb \
      --recmap {input.recmap} --annot {input.annot} \
      --seqlens {input.seqlens_file} \
      --t {params.t} \
      --w {params.w} \
      --output {output} --popsize {params.popsize} --chrom chr10 \
      --ncores-Bp {params.ncores_bp} \
      --only-Bp \
      --rescale {wildcards.w},{wildcards.t} --rescale-Bp-file {input.pkl_b_file} \
      --step {wildcards.step}
    """

## this is a rescaled-version, for some sets of parameters
rule bmap_chr10_rescale_round2:
  input: annot=join("../../annotation/",  cons_track),
         seqlens_file="../../annotation/hg38_seqlens.tsv", 
         recmap="../../annotation/HapMapII_GRCh37_liftedOverTo_Hg38/genetic_map_Hg38_chr10.txt",
         pkl_rsb_file= "rescaled_grid/bmap_rescaled_hg38_sims_{w}w_{t}t_{step,\d+}step_chr10.pkl"
  output: "rescaled_grid_2/bmap_rescaled2_hg38_sims_{w}w_{t}t_{step,\d+}step_chr10.pkl"
  params: ncores=NCORES, ncores_bp=NCORES_BP, popsize=sims_N, t=t, w=w
  shell:
    """
    python ../../../bgspy/command_line.py calcb \
      --recmap {input.recmap} --annot {input.annot} \
      --seqlens {input.seqlens_file} \
      --t {params.t} \
      --w {params.w} \
      --output {output} --popsize {params.popsize} --chrom chr10 \
      --ncores-Bp {params.ncores_bp} \
      --only-Bp \
      --rescale {wildcards.w},{wildcards.t} --rescale-Bp-file {input.pkl_b_file} \
      --step {wildcards.step}
    """


# ===== For Empirical Work =====

rule bmap_hg38:
  input: 
         seqlens_file="../../annotation/hg38_seqlens.tsv", 
         recmap=AA_RECMAP,
         cons="../../annotation/conserved_{track}.bed.gz"
  output: pkl_b_file="bmap_hg38_{grid_str}grid_{step}step_{popsize}N_{track}_aamap.pkl"
  params: ncores=NCORES, ncores_bp=NCORES_BP
  shell:
    """
    python ../../../bgspy/command_line.py calcb \
      --recmap {input.recmap} --annot {input.cons} \
      --seqlens {input.seqlens_file} --g '{wildcards.grid_str}' \
      --output {output} --popsize {wildcards.popsize} \
      --ncores {params.ncores} --ncores-Bp {params.ncores_bp} \
      --step {wildcards.step}
    """


#rule bmap_hg38_full:
#  input: 
#         seqlens_file="../../annotation/hg38_seqlens.tsv", 
#         recmap="../../annotation/hapmap_genetic_map.txt"
#  output: pkl_b_file="bmap_hg37_fullsel_{step}step_{popsize}N_{track}.pkl"
#  params: ncores=NCORES, ncores_bp=NCORES_BP
#  shell:
#    """
#    python ../../../bgspy/command_line.py calcb \
#      --recmap {input.recmap} --annot "../../annotation/conserved_{wildcards.track}.bed.gz" \
#      --seqlens {input.seqlens_file} \
#      --t 1e-7,1e-6,1e-5,1e-4,1e-3,1e-2,1e-1,0.8 --w 1e-11,1e-10,1e-9,1e-8,1e-7 \
#      --output {output} --popsize {wildcards.popsize} \
#      --ncores {params.ncores} --ncores-Bp {params.ncores_bp} \
#      --step {wildcards.step}
#    """

### Rescaled Bs

rule bmap_hg38_rescaled:
  input: 
         seqlens_file="../../annotation/hg38_seqlens.tsv", 
         recmap=AA_RECMAP,
         fit="../../../fits/hg38_cds_utrs_phastcons_simplex/hg38_cds_utrs_phastcons/window_1000000/mle.pkl",
	 pkl_b_file="bmap_hg38_{grid_str}grid_{step}step_{popsize}N_{track}.pkl"
  output: pkl_b_file="bmap_rescaled_hg38_{grid_str}grid_{step}step_{popsize}N_{track}.pkl"
  params: ncores=NCORES, ncores_bp=NCORES_BP
  shell:
    """
    python ../../../bgspy/command_line.py calcb \
      --recmap {input.recmap} --annot "../../annotation/conserved_{wildcards.track}.bed.gz" \
      --seqlens {input.seqlens_file} --g '{wildcards.grid_str}' \
      --output {output} --popsize {wildcards.popsize} \
      --ncores {params.ncores} --ncores-Bp {params.ncores_bp} \
      --rescale-fit {input.fit} --only-Bp \
      --rescale-Bp-file {input.pkl_b_file} \
      --step {wildcards.step}
    """




## Target B maps for various purposes

maps = [
        ## for the simple simulations (uses phastcons currently)
        "bmap_hg38_sims_10000step_chr10.pkl",
        ]

rescaled_sims = []
rescaled2_sims = []
for ww in chr10_sim_config['params']['mu']['grid']:
    for tt in chr10_sim_config['params']['sh']['grid']:
        rescaled_sims.append(f"rescaled_grid/bmap_rescaled_hg38_sims_{ww}w_{tt}t_10000step_chr10.pkl")
        rescaled_sims.append(f"rescaled_grid_2/bmap_rescaled2_hg38_sims_{ww}w_{tt}t_10000step_chr10.pkl")

rescaled = [ ## cds/utrs/phastcons fit (1Mbp)
             #"bmap_rescaled_hg38_6x7grid_10000step_10000N_cds_utrs_phastcons.pkl", ## TODO uncomment later
           ]     

# add in the fixed-grid rescaling for sim comparisons
rescaled.extend(rescaled_sims) 

rule test:
  input: "bmap_hg38_sims_10000step_chr10.pkl"

rule all:
  input: maps + rescaled + rescaled2_sims
