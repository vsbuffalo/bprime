import numpy as np

AUTOS = list(range(1, 23))
AUTOSEX = AUTOS + ['X', 'Y']

## ------ Human genome data

genome = ["hg38.fa.gz", "hg38_seqlens.tsv"]

rule hg38:
  # fixes chromosome labels to start with 'chr'
  output: "hg38.fa.gz"
  shell:
    """
    curl http://ftp.ensembl.org/pub/release-107/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz | \
      zcat | sed 's/^>/>chr/' | gzip > {output}
    """

## only keep autosomes
rule seqlens:
  input: "hg38.fa.gz"
  output: "hg38_seqlens.tsv"
  shell:
    """
      bioawk -cfastx '{{ print $name,length($seq) }}' hg38.fa.gz | \
      grep -P '^chr[0-9X]+' |  \
      sort  --version-sort -k 1,1 -k2,2n > {output}
    """

## ----- Human Recombination Maps
rule decode_2019_map:
   output: "aau1043_datas3.gz"
   shell:
      """
      #wget -O {output} https://www.science.org/doi/suppl/10.1126/science.aau1043/suppl_file/aau1043_datas3.gz
      wget -O {output} https://www-science-org.libproxy.berkeley.edu/doi/suppl/10.1126/science.aau1043/suppl_file/aau1043_datas3.gz
      """

rule decode_2019_hapmap:
   input: "aau1043_datas3.gz"
   output: "decode_2019_map.txt"
   shell:
      """
      python ../../tools/convert_bed_to_hapmap.py {input} > {output}
      """

recmaps = ["decode_2019_map.txt"]

## ----- Human Annotation Data
rule phastcons:
  output: "phastConsElements100way.txt.gz"
  shell:
    """
    curl http://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/phastConsElements100way.txt.gz | \
     zcat | cut -f2- | grep -P '^chr[0-9]+\t' | gzip > {output}
    """

# ---- phastcons data ----
rule phastcons_bed:
  # VALIDATION: unclear from UCSC doc whether the .txt.gz is 0 or 1-indexed. 
  # Using table browser BED output produced a version that aligns with ours
  # NOTE: must be 100-way ELEMENT track
  input: "phastConsElements100way.txt.gz"
  output: "phastcons_100way.bed.gz"
  shell:
    """
     zcat {input} | bioawk -t '{{ print $1,$2,$3 }}' | sort --version-sort -k1,1 -k2,2n | bedtools merge | gzip > {output}
    """

# ---- gene tracks ----
rule ensembl_gff:
  output: "hg38.ensembl.gff3.gz"
  shell:
     """
     wget -O {output} http://ftp.ensembl.org/pub/release-107/gff3/homo_sapiens/Homo_sapiens.GRCh38.107.chr.gff3.gz 
     """

rule ensembl_gff_autos:
  input: "hg38.ensembl.gff3.gz"
  output: "hg38.ensembl_autos.bed.gz"
  shell:
     """
     zgrep -v '^#' {input} | sed s/^/chr/ | \
       grep -P '^chr[0-9]+\t' | bioawk -t '{{ print $1,$4-1,$5+1,$3 }}' | sort --version-sort -k1,1 -k2,2n | \
       sed 's/five_prime_UTR/5UTR/' | \
       sed 's/three_prime_UTR/3UTR/' | \
       gzip > {output}
     """

rule ncbi_refseq:
 output: "hg38.ncbiRefSeq.gtf.gz"
 shell: 
    """
    wget -O {output} https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/genes/hg38.ncbiRefSeq.gtf.gz
    """

rule ncbi_refseq_clean:
 # NOTE: we replace transcript with gene
 input: "hg38.ncbiRefSeq.gtf.gz"
 output: "hg38.refseq_autos.bed.gz"
 shell: 
    """
    zgrep -P '^chr[0-9]+\t' {input} | bioawk -t '{{ print $1,$4-1,$5+1,$3 }}' | \
     sed 's/transcript/gene/' | \
     sort --version-sort -k1,1 -k2,2n | gzip > {output}
    """

## ----- split out features
annotation_features = ['exon', '5UTR', '3UTR', 'CDS', 'gene'] 

rule split_feature_ensembl:
  input: ensembl="hg38.ensembl_autos.bed.gz"
  output: "hg38.{feature,[^_]+}_ensembl_autos.bed.gz"
  shell: 
     """
     zcat {input.ensembl} | bioawk -cbed ' $name ~ /^{wildcards.feature}$/ {{ print $chrom,$start,$end,$name }} ' | \
     sort --version-sort -k1,1 -k2,2n | bedtools merge | \
     gzip > {output}
     """

rule split_feature_refseq:
  input: refseq="hg38.refseq_autos.bed.gz"
  output: "hg38.{feature,[^_]+}_refseq_autos.bed.gz"
  shell: 
     """
     zcat {input.refseq} | bioawk -cbed ' $name ~ /^{wildcards.feature}$/ {{ print $chrom,$start,$end,$name }} ' | \
     sort --version-sort -k1,1 -k2,2n | bedtools merge | \
     gzip > {output}
     """

# merge the features from ensembl and refseq
rule merge_features:
  input: refseq="hg38.{feature,[^_]+}_refseq_autos.bed.gz", ensembl="hg38.{feature,[^_]+}_ensembl_autos.bed.gz"
  output: "hg38.{feature,[^_]+}_autos.bed.gz"
  shell: 
     """
     zcat {input.refseq} {input.ensembl} | \
      sort --version-sort -k1,1 -k2,2n | bedtools merge | \
      bioawk -t '{{ print $0,"{wildcards.feature}" }}' | \
      gzip > {output}
     """

rule phastcons_split:
  input: "phastcons_100way.bed.gz"
  output: "hg38.phastcons_autos.bed.gz"
  shell: 
     """
     zcat {input} | \
       sort --version-sort -k1,1 -k2,2n | bedtools merge | \
       bioawk -t '{{ print $0,"phastcons" }}' | \
       gzip > {output}
     """

rule merge_UTRs:
  input: "hg38.3UTR_autos.bed.gz", "hg38.5UTR_autos.bed.gz"
  output: "hg38.UTR_autos.bed.gz"
  shell: 
     """
     zcat {input[0]} {input[1]} | \
      sort --version-sort -k1,1 -k2,2n | bedtools merge | \
      bioawk -t '{{ print $0,"UTR" }}' | \
      gzip > {output}
     """
split = [f"hg38.{f}_autos.bed.gz" for f in annotation_features]
split += [f"hg38.{f}_refseq_autos.bed.gz" for f in annotation_features]
split += [f"hg38.{f}_ensembl_autos.bed.gz" for f in annotation_features]
split += ["hg38.phastcons_autos.bed.gz",  "hg38.UTR_autos.bed.gz"]

clean_annot = ["hg38.ensembl_autos.bed.gz", "hg38.refseq_autos.bed.gz", "hg38_seqlens.tsv"]

## ----- neutral track
# we remove all phastcons, exons, CDS, and UTRs
rule neutral_slop:
  input: exon="hg38.exons_autos.bed.gz", cds="hg38.CDS_autos.bed.gz", 
         UTR="hg38.UTR_autos.bed.gz", phastcons="hg38.phastcons_autos.bed.gz",
         seqlens="hg38_seqlens.tsv"
  output: "putatively_neutral__slop{slop}.bed.gz"
  shell:
     """
     zcat {input.exon} {input.cds} {input.UTR} {input.phastcons} | \
      bedtools slop -g {input.seqlens} -b {wildcards.slop}  | \
      sort --version-sort -k1,1 -k2,2n | bedtools merge | \
       bedtools complement -i - -g {input.seqlens} | gzip > {output}
     """

neutral = ["putatively_neutral__slop0.bed.gz", "putatively_neutral__slop1000.bed.gz"]

rule all:
  input: clean_annot, split, recmaps, genome, neutral

