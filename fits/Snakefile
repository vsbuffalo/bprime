# main annotation files

# other params
NCORES = 40
NCORES_BOOT = 40
NSTARTS = 1000
NSTARTS_BOOT = 500

NCORES_LOO = NCORES
NSTARTS_LOO = 50

CHROMS = [f'chr{x}' for x in range(1, 23)]

# from config
name = config["name"]
model = config["model"]
mu = config.get("mu", None)
seqlens_file = config["seqlens_file"]
recmap_file = config["recmap_file"]
access_file = config["access_file"]
neut_file = config["neut_file"]
fasta_file = config["fasta_file"]
counts_dir = config["counts_dir"]
Bs_file = config["Bs_file"]
windows = [int(w) for w in config["windows"]]
blocksize = int(config["blocksize"])

# the data that goes into the likelihood model
model_data = [f'model_data_{w}.pkl' for w in windows]

rule save_data:
  # only get the data, e.g. for testing, for this model
  input: seqlens=seqlens_file, recmap_file=recmap_file,
         access_file=access_file, fasta_file=fasta_file,
         neut_file=neut_file, counts_dir=counts_dir,
         bs_file=Bs_file
  output: 'model_data_{window}.pkl'
  params: model=model, mu=mu, name=name
  shell:
    """
    mkdir -p {params.name}
    bgspy data --seqlens {input.seqlens} --recmap {input.recmap_file} \
      --model {params.model} \
      --counts-dir {input.counts_dir} --neutral {input.neut_file} \
      --access {input.access_file} --bs-file {input.bs_file} \
      --window {wildcards.window} \
      --fasta {input.fasta_file} \
      --output {output[0]}
    """


rule fit:
  input: 'model_data_{window}.pkl'
  output: 'fit_{window}/mle.pkl'
  params: ncores=NCORES, nstarts=NSTARTS, model=model, mu=mu, name=name
  shell:
    """
    mkdir -p {params.name}
    bgspy fit \
      --model {params.model} --mu {params.mu} \
      --data {input[0]} \
      --ncores {params.ncores} --nstarts {params.nstarts} \
      --output {output[0]}
    """

rule jackknife:
  # note that this only runs one bootstrap, we set nboot = ncores
  input: fit='fit_{window}/mle.pkl', 
  output: 'fit_{window}/bootstraps/bootstrap_{boot}.npz'
  params: ncores=NCORES_BOOT, nstarts=NSTARTS_BOOT, blocksize=blocksize
  shell:
    """
    bgspy jackknife --fit {input.fit} \
      --B {params.ncores} --blocksize {params.blocksize} \
      --ncores {params.ncores} --nstarts {params.nstarts} \
      --outfile {output[0]}
    """

rule loo:
  input: fit='fit_{window}/mle.pkl', 
  output: 'fit_{window}/loo/loo_r2_{chrom}.npz'
  params: ncores=NCORES_LOO, nstarts=NSTARTS_LOO
  shell:
    """
    bgspy r2 --fit {input.fit} \
      --r2-file {output[0]} \
      --fit-dir loo \
      --loo-chrom {wildcards.chrom} \
      --ncores {params.ncores} --nstarts {params.nstarts}
    """

NBOOT_PARALLEL = 100
loo_results = []
mle_results = []
boots_results = []
for window in windows:
  mle_results.append(f'fit_{window}/mle.pkl')
  #boots = [f"window_{window}/bootstraps/bootstrap_{b}.npz" for 
  #         b in range(NBOOT_PARALLEL)]
  #boots_results.extend(boots)
  for chrom in CHROMS:
      loo_r2 = f"fit_{window}/loo/loo_r2_{chrom}.npz"
      loo_results.append(loo_r2)

rule mle:
  input: mle_results

rule data:
  input: model_data
