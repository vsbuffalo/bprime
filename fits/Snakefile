# main annotation files
#

machine = 'cluster'

NSTARTS = 100_000
NSTARTS_LOO = 100_000

# note: ncores_loo is per-job;
# you'll want to account number of total jobs,
# -j
if machine == 'cluster':
    NCORES = 40
    NCORES_LOO = NCORES
else:
    NCORES = 70
    NCORES_LOO = 5


CHROMS = [f'chr{x}' for x in range(1, 23)]

# from config
name = config["name"]
mu = config.get("mu", None)
seqlens_file = config["seqlens_file"]
recmap_file = config["recmap_file"]
access_file = config["access_file"]
neut_file = config["neut_file"]
fasta_file = config["fasta_file"]
counts_dir = config["counts_dir"]
Bs_file = config["Bs_file"]
windows = [int(w) for w in config["windows"]]
blocksize = int(config["blocksize"])

# the data that goes into the likelihood model
model_data = [f'model_data_{w}.pkl' for w in windows]

rule save_data:
  # only get the data, e.g. for testing, for this model
  input: seqlens=seqlens_file, recmap_file=recmap_file,
         access_file=access_file, fasta_file=fasta_file,
         neut_file=neut_file, counts_dir=counts_dir,
         bs_file=Bs_file
  output: 'model_data_{window}.pkl'
  params: name=name
  shell:
    """
    mkdir -p {params.name}
    bgspy data --seqlens {input.seqlens} --recmap {input.recmap_file} \
      --counts-dir {input.counts_dir} --neutral {input.neut_file} \
      --access {input.access_file} --bs-file {input.bs_file} \
      --window {wildcards.window} \
      --fasta {input.fasta_file} \
      --output {output[0]}
    """

rule fit:
  input: 'model_data_{window}.pkl'
  output: 'fit_{window}/mle.pkl'
  params: ncores=NCORES, nstarts=NSTARTS, mu=mu, name=name
  shell:
    """
    mkdir -p {params.name}
    bgspy fit \
      --data {input[0]} \
      --ncores {params.ncores} --nstarts {params.nstarts} \
      --output {output[0]}
    """

# rule jackknife:
#   input: fit='fit_{window}/mle.pkl', 
#   output: 'fit_{window}/jackknifes/jackknifes_{boot}.npz'
#   params: ncores=NCORES_JK, nstarts=NSTARTS_JK, blocksize=blocksize
#   shell:
#     """
#     bgspy jackknife --fit {input.fit} \
#       --B {params.ncores} --blocksize {params.blocksize} \
#       --ncores {params.ncores} --nstarts {params.nstarts} \
#       --outfile {output[0]}
#     """

rule loo_fit:
  input: 'model_data_{window}.pkl'
  output: 'fit_{window}/loo/loo_{chrom}.pkl'
  params: ncores=NCORES_LOO, nstarts=NSTARTS_LOO
  shell:
    """
    bgspy jackknife \
      --data {input[0]} \
      --output {output[0]} \
      --chrom {wildcards.chrom} \
      --ncores {params.ncores} --nstarts {params.nstarts}
    """

loo_results = []
mle_results = []
boots_results = []
for window in windows:
  mle_results.append(f'fit_{window}/mle.pkl')
  for chrom in CHROMS:
      loo = f"fit_{window}/loo/loo_{chrom}.pkl"
      loo_results.append(loo)

rule mle:
  input: mle_results

rule jackknife:
  input: loo_results

rule data:
  input: model_data
