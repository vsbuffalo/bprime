
initialize() {
  source("../utils.slim");
  initializeTreeSeq();
  // get chromsome length
  defineConstant("seqlen_file", "../../data/annotation/hg38_seqlens.tsv");
  for (line in readFile(seqlen_file)) {
    parts = strsplit(line, "\t");
    if (parts[0] == "chr"+chr) {
      chrom_length = asInteger(parts[1]);
    }
  }
 
  defineConstant("region_length", chrom_length); 
  defineConstant("seed", getSeed());
  defineConstant("metadata", Dictionary());
  if (!exists("name")) {
    defineConstant("name", "chrombgs");
  }
 
  if (!exists("subdir")) {
    defineConstant("subdir_", "");
  } else {
    defineConstant("subdir_", subdir + '/');
  }

  if (exists("slimgui") | exists("defaults")) {
    defineConstant("rep", 0);
    defineConstant("N", 1000);
    defineConstant("sh", 1e-4);
    defineConstant("mu", 1e-8);
    defineConstant("datadir", '');
  } else {
    defineConstant("datadir", '../../data/slim_sims/chrombgs_features_chr10/'+name+'/sims/'+subdir_);
  }
  defineConstant("recmap_file", "../../data/annotation/HapMapII_GRCh37_liftedOverTo_Hg38/genetic_map_Hg38_chr"+chr+".txt");

  // We fix h = 0.5 and calculate the proper homozygous selection
  // coefficient.
  defineConstant("h", 0.5);

  // == Runtime settings
  defineConstant("burnin", 10*N);
  defineConstant("endsim", burnin);

  // load DFE file -- TSV of features and CSV DFE probs
  dfe = Dictionary();
  dfe_map = Dictionary();
  SELS = c(1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1);
  for (line in readFile(dfe_file)) {
    parts = strsplit(line, "\t");
    feature = parts[0];
    dist = asFloat(strsplit(parts[1], ","));
    dfe.setValue(feature, dist);
  };

  metadata.setValue("N", N);
  metadata.setValue("h", h);
  metadata.setValue("mu", mu);
  metadata.setValue("region_length", region_length);
  metadata.setValue("seqlen_file", seqlen_file);
  metadata.setValue("recmap_file", recmap_file);
  metadata.setValue("annot_file", annot_file);
  metadata.setValue("dfe_file", dfe_file);

  // == File Output
  filestr = filename_str(c('N', 'mu', 'chr', 'seed', 'rep'));
  defineConstant("basename", name + "_" + filestr);
  defineConstant("treeseq_file", datadir + basename + "treeseq.tree");
  defineConstant("dac_file", datadir + basename + "seldac.tsv.gz");
  defineConstant("sub_file", datadir + basename + "sub.tsv.gz");

  // log = sim.createLogFile(log_file, initialContents="#" + pd.serialize(), 
                          // compress=T, sep="\t", logInterval=1);
  // log.addGeneration();

  // == Genome
  // selected features
  initializeMutationType("m1", h, "f", -1e-1);
  initializeMutationType("m2", h, "f", -1e-2);
  initializeMutationType("m3", h, "f", -1e-3);
  initializeMutationType("m4", h, "f", -1e-4);
  initializeMutationType("m5", h, "f", -1e-5);
  initializeMutationType("m6", h, "f", -1e-6);
  gene_els = Dictionary();
  for (i in seqAlong(dfe.allKeys)) {
    key = dfe.allKeys[i];
    gx = paste0("g", i);
    gene_els.setValue(key, gx);
    initializeGenomicElementType(gx, 
                                 c(m6, m5, m4, m3, m2, m1),
                                 dfe.getValue(key));
  }
  metadata.setValue("dfe", dfe);

  // we need to do some pre-processing here, as we need to 
  // get the total number of feaeture types first
  ngenes = 0;
  for (line in readFile(annot_file)) {
    parts = strsplit(line, "\t");
    chrom = parts[0];
    if (chrom != paste0("chr", chr)) {
      next;
    }
    start = asInteger(parts[1]);
    end = asInteger(parts[2]);
    key = parts[3];
    initializeGenomicElement(executeLambda(gene_els.getValue(key) + ';'), start, end-1);
    ngenes = ngenes + 1;
  }
  print("number of genes: " + ngenes);

  // == Mutations/
  initializeMutationRate(mu);

 
  // == Recombination
  // assumes cM/Mb rates 0.01 / 1e6
  bins = c();
  rates = c();
  for (line in readFile(recmap_file)) {
    parts = strsplit(line, "\t");
    if (parts[0] == "Chromosome") {
      next; // skip HapMap header
    }
    // rates are cM/Mbp per 100kb window
    rates = c(rates, 1e-8 * asFloat(parts[2]));
    bins = c(bins, asInteger(parts[1]));
  }
  bins = c(bins, region_length-1);
  rates = c(rates, 0);
  //print(bins[(length(rates)-10):(length(rates)-1)]);
  defineConstant('rec_rates', rates);
  defineConstant('rec_bins', bins);
  //print(rec_bins);
  initializeRecombinationRate(rec_rates, rec_bins);

  pd = param_dict(c('rep', 'N', 'h', 'mu',
                    'recmap_file', 'annot_file'));
  writeFile(dac_file, "#" + pd.serialize(), compress=T);
  writeFile(sub_file, "#" + pd.serialize(), compress=T);

}

// create a population of 500 individuals
1 {
  sim.addSubpop("p1", N);
  sim.rescheduleScriptBlock(s1, start=2, end=burnin);
  sim.rescheduleScriptBlock(s2, start=endsim, end=endsim);
}

s1 {
  if (sim.generation % 1000 == 0) 
    print(sim.generation);
}

s2 late() {
  output_mutations(chr, dac_file, p1);
  sim.treeSeqOutput(treeseq_file, metadata=metadata);
  output_substitutions(chr, sub_file, p1);
}

