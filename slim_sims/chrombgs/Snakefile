from os.path import join
from bgspy.slim import SlimRuns

if not len(config):
    raise ValueError("config file not specified on command line, use --configfile config.json")


# --- slim sims --- 
run = SlimRuns(config)
name = run.name
basedir = run.basedir
bmaps = config['mle']['bmaps']

windows = config['mle']['windows']

# get all the B maps we need for these params,
# since these vary over N and chrom
b_file = "bmap_6x8grid_100000step_{N}N_{chrom}_{name}.pkl"

# generate all the targets for this YAML file.
sim_results = run.generate_targets()

## useful for debugging:
#print("all targets:")
#print(sim_results) 
#print("template:")
#print(run.output_template()) 
#print("slim call:")
#print(run.slim_cmd())

rule slim:
    input: run.script, **run.input
    output: **run.output_template()
    shell: run.slim_cmd()


# --- empirical B --- 
rule empirical_B:
    input: files=sim_results, dir=run.simdir
    output: pkl=join(run.basedir, 'empirical_B', 'empirical_Bs.pkl')
    threads: 40
    shell:
        """
        python ../../tools/process_sims.py {input.dir} {output.pkl} --ncores {threads}
        """


# --- B map for sims ---
bmap_pattern = "bmap__{name}.pkl"


def get_bmap_input(wildcards):
  input = bmaps[wildcards.name]
  seqlens, recmap, annot = input['seqlens_file'], input['recmap_file'], input['annot_file']
  return dict(seqlens=seqlens, recmap=recmap, annot=annot)


rule bmap:
  input: unpack(get_bmap_input)
  output: pkl_b_file=join(run.basedir, 'bmaps/N__{N}/chrom__{chrom}', bmap_pattern)
  params: step=lambda w: bmaps[w.name]['step'], grid=lambda w: bmaps[w.name]['grid']
  threads: 30
  shell:
    """
    bgspy calcb \
      --recmap {input.recmap} --annot {input.annot} \
      --seqlens {input.seqlens} --g '{params.grid}' \
      --output {output} --popsize {wildcards.N} \
      --chrom {wildcards.chrom} \
      --ncores {threads} --ncores-Bp {threads} \
      --step {params.step}
    """


# --- mle --- 
fit_nreps = 50
mle_results = []
for bmap_name in bmaps:
    for window in windows:
        mle_dir = join('mle', bmap_name, str(window))
        mle_data = run.generate_targets(suffices={'data': 'data.pkl'},
                                        outdir=mle_dir,
                                        nreps=fit_nreps, reseed=True)
        mle_results.extend(mle_data)
        mle_fits = run.generate_targets(suffices={'fit': 'mle.pkl'},
                                        outdir=mle_dir,
                                        nreps=fit_nreps, reseed=True)
        mle_results.extend(mle_fits)


rule mle_data:
  input: **run.output_template(suffices={'tree_file': 'treeseq.tree'}),
         bs_file=join(run.basedir, 'bmaps/N__{N}/chrom__{chrom}/bmap__{bmap}.pkl')
  output: **run.output_template(outdir='mle/{bmap}/{window}', suffices={'pkl': 'data.pkl'})
  shell:
    """
    bgspy simdata --bs-file {input.bs_file} --chrom {wildcards.chrom} \
      --sim-tree {input.tree_file} \
      --window {wildcards.window} --sim-mu 1e-7 --output {output.pkl}
    """


rule mle_fit:
  input: **run.output_template(outdir='mle/{bmap}/{window}', suffices={'pkl': 'data.pkl'})
  output: **run.output_template(outdir='mle/{bmap}/{window}', suffices={'pkl': 'mle.pkl'})
  threads: 40
  shell:
    """
    bgspy fit --data {input.pkl} --output {output.pkl} --ncores {threads}
    """


rule all:
    input: sim_results, mle_results
