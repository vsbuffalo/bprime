"""
This is the simulation MLE fititng pipeline.

It is currently separate from the Simulation
pipeline so it doesn't have to know all the 
simulation results names in a directory a priori
to process -- 
"""

from os.path import join
from bgspy.utils import get_files

# treeseq to count data params
# higher than exp. because smaller N
SIM_MU = 1e-7

# fit params
NCORES = 40
NSTARTS = 500


Bs_file = config["Bs_file"]
sim_dir = config["tree_dir"]
chrom = config["chrom"]

MLEDIR = join('../../data/slim_sims/chrombgs_chr10', name, 'mle')



# ------- Get the Simulation Tree files to Process -------
# 
avail_tree_files = get_files(sim_dir, suffix=".tree", as_dict=True)
expected_mle_files = []
for file in avail_tree_files.keys():
    rgx = '../../data/slim_sims/chrombgs_chr10/conserved_cds_phastcons_merged/sims/(\d+)/(.+)'
    subdir, file = re.match(rgx, file).groups()
    _, rep = re.match(r'.*seed(\d+)_rep(\d+)_treeseq.tree$', file).groups()
    rep = int(rep)
    # let's only process one rep for MLE -- the others were mainly for sim B
    # estimates, which are faster
    if rep > 10:
       continue
    outfile = join(MLEDIR, subdir, file.replace('_treeseq.tree', '_1000000_mle.pkl'))
    expected_mle_files.append(outfile)

# ------- MLE parameters and fitting  -------
#
rule mle_data:
  input: treefile=join(DATADIR, "sims/{subdir}/{run_name}_treeseq.tree"),
         bs_file=Bs_file
  output: join(DATADIR, 'mle/{subdir}/{run_name}_{window}_mle.pkl')
  shell:
    """
    bgspy simdata --bs-file {input.bs_file}  --sim-tree {input.treefile} --window {wildcards.window} --sim-mu 1e-7 --output {output[0]}
    """

rule mle_fit:
  input: join(DATADIR, 'mle/{subdir}/{run_name}_{window}_data.pkl')
  output: join(DATADIR, 'mle/{subdir}/{run_name}_{window}_mle.pkl')
  params: ncores=NCORES
  shell:
    """
    bgspy fit --data {input.data} --output {output[0]} --ncores {params.ncores}
    """
#print(avail_tree_files)
#print(avail_tree_files, expected_mle_files)
rule all:
  input: *expected_mle_files
