// function (void)assert(logical x, [string msg = "assertion failed"]) {
//   if (!x) stop(msg);
// }

function (logical)contains(string x, string y) {
  assert(length(x) == 1 & length(y) == 1, "x and y must be length 1");
  return length(strsplit(x, y)) > 1;
}

function (string)filename_str(string params) {
  out = "";
  for (i in seqAlong(params)) {
    v = params[i];
    val = executeLambda(v + ";");
    assert(!contains(asString(val), "..") & !contains(asString(val), "/"),
           "filename key/value cannot contain . or /!");
    out = out + v + val + "_";
  }
  return out;
}

function (object)param_dict(string params) {
  pd = Dictionary();
  for (i in seqAlong(params)) {
    v = params[i];
    val = executeLambda(v + ";");
    if (length(val) > 1) {
      val = paste(val, sep=",");
    }
    pd.setValue(v, val);
  }
  return pd;
}

function (float) standard_fitness(object ind, object mut_type) {
  muts = sim.mutationsOfType(mut_type);
  hh = mut_type.dominanceCoeff;
  ss = muts.selectionCoeff;
  nmuts1 = ind.genome1.mutationCountsInGenomes(muts);
  nmuts2 = ind.genome2.mutationCountsInGenomes(muts);
  muts = nmuts1 + nmuts2;
  hets = muts == 1;
  homs = muts == 2;
  return exp(sum(log(1 + hh*ss[hets])) + sum(log(1 + ss[homs])));
}

function (float) pop_fitness(object mut_type) {
  inds = sim.subpopulations.individuals;
  return sapply(inds, 'standard_fitness(applyValue, mut_type);');
}

function (float) pop_fitness(object mut_type) {
  inds = sim.subpopulations.individuals;
  return sapply(inds, 'standard_fitness(applyValue, mut_type);');
}

initialize() {
  initializeTreeSeq();
  defineConstant("seed", getSeed());
  defineConstant("metadata", Dictionary());
  defineConstant("neutral_length", 100);

  if (exists("slimgui") | exists("defaults")) {
    defineConstant("segment_length", 10000);
    defineConstant("rep", 0);
    defineConstant("rbp", 1e-8);
    defineConstant("recfrac", 1e-8);
    defineConstant("N", 1000);
    defineConstant("s", -2e-2);
    defineConstant("mu", 1e-8);
    defineConstant("h", 0.5);    // deleterious dominance
	defineConstant("datadir", '');
  } else {
	defineConstant("datadir", '../data/slim_sims/segment/');
  }

  defineConstant("region_length", neutral_length + segment_length);

  // == Runtime settings
  defineConstant("burnin", 10*N);
  defineConstant("endsim", burnin);

  metadata.setValue("N", N);
  metadata.setValue("s", s);
  metadata.setValue("h", h);
  metadata.setValue("mu", mu);
  metadata.setValue("recfrac", recfrac);
  metadata.setValue("rbp", rbp);
  metadata.setValue("neutral_length", neutral_length);
  metadata.setValue("segment_length", segment_length);
  metadata.setValue("region_length", region_length);

  // == File Output
  filestr = filename_str(c('rep', 'mu', 'rbp', 'recfrac', 'N', 's', 'h', 
                           'neutral_length', 'segment_length'));
  defineConstant("basename", "segment_" + filestr);
  defineConstant("treeseq_file", datadir + basename + "treeseq.tree");

  // == Mutations, Regions, and Recombination
  initializeMutationRate(mu);
  
  // segment deleterious mutations
  initializeMutationType("m1", h, "f", s);

  // Neutral tracked region from [0, neutral_length-1] with no mutation
  // followed by a 1bp spacer (this is a bit silly but we don't want any
  // mutation or recombination in that 1bp)

  // gene segment under selection
  initializeGenomicElementType("g1", m1, 1);
  initializeGenomicElement(g1, neutral_length+1, neutral_length+segment_length);

  // recombination between segments
  rec_rates = c(0, recfrac, rbp);
  rec_bins = c(neutral_length-1,               // neutral region
               neutral_length,                 // 1bp free recombinaton spacer
               neutral_length+segment_length);  // selected region
  initializeRecombinationRate(rec_rates, rec_bins);
}

1 {
  sim.addSubpop("p1", N);
  sim.rescheduleScriptBlock(s1, start=2, end=burnin);
  sim.rescheduleScriptBlock(s2, start=endsim, end=endsim);
}

s1 {
  if (sim.generation % 1000 == 0) 
    print(sim.generation);
}

s2 late() {
  // how many del mutations fixed?
  inds = p1.individuals;
  ndel_subs = inds.countOfMutationsOfType(m1);
  fixed_load = inds.sumOfMutationsOfType(m1);
  metadata.setValue("ndel_subs", ndel_subs);
  metadata.setValue("fixed_load", fixed_load);
  popfit = pop_fitness(m1);
  metadata.setValue("Ef", mean(popfit));
  metadata.setValue("Vf", var(popfit));
  sim.treeSeqOutput(treeseq_file, metadata=metadata);
}

