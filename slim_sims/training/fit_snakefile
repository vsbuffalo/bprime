from os.path import join
from bgspy.sim_utils import param_grid

if not len(config):
    raise ValueError("config file not specified on command line, use --configfile config.json")

name = config['name']
average_reps = '--average' if config['average'] else '--no-average'
activs = config['activs']
outactivs = config['outactivs']
balances = config['balances']
nreps = config['fit_nreps']
archs = config['archs']

DATADIR = "../../data/slim_sims/"

def get_outfile(name, dir=None, suffix=''):
     dir = dir if dir is not None else ''
     return os.path.join(dir, name.replace('/', '')+suffix)

def fill_suffix(name, suffix):
    return name.replace('{suffix}', suffix)



SIMDIR = os.path.join(DATADIR, name, "sims")


# root filepath name for DNN fits
FILENAME = join(DATADIR, name, "fits", f"{name}_{{n128}}n128_{{n64}}n64_{{n32}}n32_{{n8}}n8_{{nx}}nx_{{activ}}activ_{{outactiv}}outactiv_{{balance}}balance_{{rep}}_fit_rep{{suffix}}")
npz_file = get_outfile(name, dir=join(DATADIR, name), suffix='.npz')
data_file = get_outfile(name, dir=join(DATADIR, name), suffix='_data.pkl')

#print(npz_file, data_file)
#sys.exit()

dnn_files = []

params = dict(activ=activs, outactiv=outactivs, 
              balance=balances, rep=list(range(nreps)),
              arch=archs)

fit_params = param_grid(params)

for param_set in fit_params:
    kwargs = {**param_set, **param_set['arch']}
    dnn_files.append(FILENAME.format(**kwargs, suffix='.pkl'))
    dnn_files.append(FILENAME.format(**kwargs, suffix='.h5'))

rule process_trees:
    input: # whole directory
    output: npz_file
    shell:
        f"""
        python ../../tools/trees2data.py --outfile {{output}} --ncores 20 \
          --features 'mu,sh,L,rbp,rf,rep' {SIMDIR}
        """

rule process_data:
  input: json=f"{name}.json", npz=npz_file
  output: data_file
  shell:
     f"""
     python ../../tools/fit_sims.py data --outfile {{output}} {average_reps} {{input.json}} {{input.npz}}
     """

rule fit_dnn:
  input: data_file
  output: model=fill_suffix(FILENAME, '.pkl'), keras=fill_suffix(FILENAME, '.h5')
  run:
     balance_target = '--balance-target' if wildcards.balance else ''
     cmd = """\
     module load cuda/10.1
     python ../../tools/fit_sims.py fit --outfile {output.model} --batch-size 128 --n128 {wildcards.n128} \
      --n64 {wildcards.n64} --n32 {wildcards.n32} --n8 {wildcards.n8} --nx {wildcards.nx} \
      --activation {wildcards.activ} --output-activation {wildcards.outactiv} {balance_target} {input} 
     """
     shell(cmd)



rule data:
  input: data_file

rule train:
  input: dnn_files 

rule all:
  input: dnn_files
