from os.path import join
from bgspy.sim_utils import param_grid

if not len(config):
    raise ValueError("config file not specified on command line, use --configfile config.json")

name = config['name']
average_reps = '--average' if config['average'] else '--no-average'
activs = config['activs']
outactivs = config['outactivs']
vsws = config['var_sample_weights']
l2penalties = config['l2_penalty']
#balances = config['balances']
nreps = config['fit_nreps']
archs = config['archs']

DATADIR = "../../data/slim_sims/"

FILENAME_PATTERN = f"{name}_{{n16}}n16_{{n8}}n8_{{n4}}n4_{{n2}}n2_{{nx}}nx_{{l2penalty}}l2penalty_{{activ}}activ_{{outactiv}}outactiv_{{varsampleweight}}vsw_fit_{{rep}}rep{{suffix}}"

def get_outfile(name, dir=None, suffix=''):
     dir = dir if dir is not None else ''
     return os.path.join(dir, name.replace('/', '')+suffix)

def fill_suffix(name, suffix):
    return name.replace('{suffix}', suffix)

SIMDIR = os.path.join(DATADIR, name, "sims")


# root filepath name for DNN fits
FILENAME = join(DATADIR, name, "fits", FILENAME_PATTERN)

npz_file = get_outfile(name, dir=join(DATADIR, name), suffix='.npz')
data_file = get_outfile(name, dir=join(DATADIR, name), suffix='_data.pkl')

#print(npz_file, data_file)
#sys.exit()

dnn_files = []

params = dict(activ=activs, outactiv=outactivs, 
              #balance=balances, 
              l2penalty=l2penalties,
              varsampleweight=vsws,
              rep=list(range(nreps)),
              arch=archs)

fit_params = param_grid(params)

COAL_NPZ = "msprime_spike_100total_50reps_1000N_12seed.npz"

for param_set in fit_params:
    kwargs = {**param_set, **param_set['arch']}
    dnn_files.append(FILENAME.format(**kwargs, suffix='.pkl'))
    dnn_files.append(FILENAME.format(**kwargs, suffix='.h5'))

rule process_trees:
    input: # whole directory
    output: npz_file
    shell:
        f"""
        python ../../tools/trees2data.py --outfile {{output}} --ncores 20 \
          --features 'mu,sh,L,rbp,rf,rep' {SIMDIR}
        """

rule msprime_spike:
    input: json=f"{name}.json"
    output: "msprime_spike_{total}total_{reps}reps_{N}N_{seed}seed.npz"
    shell:
        """
        python ../../tools/fit_sims.py spike --outfile {output} \
        --N {wildcards.N} --total {wildcards.total} --reps {wildcards.reps} \
        --seed {wildcards.seed} {input.json}
        """

rule process_data:
  input: json=f"{name}.json", fwd_npz=npz_file, coal_npz=COAL_NPZ
  output: data_file
  shell:
     f"""
     python ../../tools/fit_sims.py data --outfile {{output}} {average_reps} \
        {{input.json}} {{input.fwd_npz}} {{input.coal_npz}}
     """

rule fit_dnn:
  input: data_file 
  output: model=fill_suffix(FILENAME, '.pkl'), keras=fill_suffix(FILENAME, '.h5')
  shell:
     """
     module load cuda/10.1
     python ../../tools/fit_sims.py fit --outfile {output.model} --batch-size 128 \
      --n16 {wildcards.n16} \
      --n8 {wildcards.n8} --n4 {wildcards.n4} --n2 {wildcards.n2} \
      --nx {wildcards.nx} \
      --l2-penalty {wildcards.l2penalty} --activation {wildcards.activ} \
      --var-sample-weights {wildcards.varsampleweight} \
      --output-activation {wildcards.outactiv} {input}
     """

rule spike:
  input: COAL_NPZ

rule data:
  input: data_file

rule train:
  input: dnn_files 

rule all:
  input: npz_file, data_file, dnn_files
