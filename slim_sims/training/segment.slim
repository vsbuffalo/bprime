source("../utils.slim")

initialize() {
  initializeTreeSeq();
  defineConstant("seed", getSeed());
  defineConstant("metadata", Dictionary());
  defineConstant("tracklen", 10);
  if (!exists("name")) {
    defineConstant("name", "segment");
  }
 

  if (exists("slimgui") | exists("defaults")) {
    defineConstant("seglen", 10000);
    defineConstant("rbp", 1e-8);
    defineConstant("rf", 1e-8);
    defineConstant("N", 1000);
    defineConstant("s", 1e-2);
    defineConstant("mu", 1e-8);
    defineConstant("h", 0.5);    // deleterious dominance
	defineConstant("datadir", 'tests/');
	defineConstant("name", 'defaults');
  } else {
	defineConstant("datadir", '../../data/slim_sims/'+name+'/');
  }

  defineConstant("region_length", tracklen + seglen + 1);

  // == Runtime settings
  defineConstant("burnin", 10*N);
  defineConstant("endsim", burnin);

  metadata.setValue("N", N);
  metadata.setValue("s", s);
  metadata.setValue("h", h);
  metadata.setValue("mu", mu);
  metadata.setValue("rf", rf);
  metadata.setValue("rbp", rbp);
  metadata.setValue("tracklen", tracklen);
  metadata.setValue("seglen", seglen);
  metadata.setValue("region_length", region_length);

  // == File Output
  // this must be the same order as the bgs_params in the Snakefile
  filestr = filename_str(c('N', 'mu', 's', 'h', 'rbp', 
                           'rf', 'seglen', 'seed'));
  defineConstant("basename", name + "_" + filestr);
  defineConstant("treeseq_file", datadir + basename + "treeseq.tree");

  // == Mutations, Regions, and Recombination
  initializeMutationRate(mu);
  
  // segment deleterious mutations
  initializeMutationType("m1", h, "f", 0.0);
  initializeMutationType("m2", h, "f", -s);

  // Neutral tracked region from [0, tracklen-1] with no mutation
  // followed by a 1bp spacer (this is a bit silly but we don't want any
  // mutation or recombination in that 1bp)

  // gene segment under selection
  initializeGenomicElementType("g1", m1, 1);
  initializeGenomicElementType("g2", m2, 1);
  initializeGenomicElement(g1, 0, tracklen);
  initializeGenomicElement(g2, tracklen+1, tracklen+seglen);

  // recombination between segments
  rec_rates = c(0, rf, rbp);
  rec_bins = c(tracklen-1,        // neutral region
               tracklen,          // 1bp free recombinaton spacer
               tracklen+seglen);  // selected region
  initializeRecombinationRate(rec_rates, rec_bins);
}

1 {
  sim.addSubpop("p1", N);
  sim.rescheduleScriptBlock(s1, start=2, end=burnin);
  sim.rescheduleScriptBlock(s2, start=endsim, end=endsim);
}

s1 {
  if (sim.generation % N == 0) 
    print(sim.generation);
}

s2 late() {
  // how many del mutations fixed?
  inds = p1.individuals;
  ndel_subs = length(sim.substitutions.mutationType == m2);
  fixed_load = sum(sim.substitutions[sim.substitutions.mutationType == m2].selectionCoeff);
  metadata.setValue("ndel_subs", sum(ndel_subs));
  metadata.setValue("fixed_load", sum(fixed_load));
  metadata.setValue("generations", sim.generation);
  popfit = pop_fitness(m2);
  metadata.setValue("Ef", mean(popfit));
  metadata.setValue("Vf", var(popfit));
  sim.treeSeqOutput(treeseq_file, metadata=metadata);
}

