
initialize() {
  source("../utils.slim");
  initializeTreeSeq();
  // get chromsome length
  defineConstant("seqlen_file", "../data/annotation/hg38_seqlens.tsv");
  for (line in readFile(seqlen_file)) {
    parts = strsplit(line, "\t");
    if (parts[0] == "chr10") {
      chrom_length = asInteger(parts[1]);
    }
  }
 
  defineConstant("region_length", chrom_length); 
  defineConstant("seed", getSeed());
  defineConstant("metadata", Dictionary());
  if (!exists("name")) {
    defineConstant("name", "simplebgs");
  }
 

  if (exists("slimgui") | exists("defaults")) {
    defineConstant("rep", 0);
    defineConstant("N", 1000);
    defineConstant("s", 2e-4);
    defineConstant("mu", 1e-8);
    defineConstant("h", 0.5);    // deleterious dominance
	defineConstant("datadir", '');
  } else {
	defineConstant("datadir", '../../data/slim_sims/' + name + '/');
  }
  //defineConstant("recmap_file", "../data/annotation/rec_100kb_chr"+chr+".bed");
  defineConstant("recmap_file", "../../data/annotation/hapmap/genetic_map_GRCh37_chr"+chr+".txt");
  defineConstant("annot_file", "../../data/annotation/conserved_by_chrom/chr"+chr+".bed");

  // == Runtime settings
  defineConstant("burnin", 10*N);
  defineConstant("endsim", burnin);

  metadata.setValue("N", N);
  metadata.setValue("s", s);
  metadata.setValue("h", h);
  metadata.setValue("mu", mu);
  metadata.setValue("region_length", region_length);
  metadata.setValue("seqlen_file", seqlen_file);
  metadata.setValue("recmap_file", recmap_file);
  metadata.setValue("annot_file", annot_file);

  // == File Output
  filestr = filename_str(c('N', 'mu', 's', 'h', 'chr', 'rep'));
  defineConstant("basename", name + "_" + filestr);
  defineConstant("treeseq_file", datadir + basename + "treeseq.tree");
  defineConstant("dac_file", datadir + basename + "seldac.tsv.gz");
  defineConstant("sub_file", datadir + basename + "sub.tsv.gz");

  // log = sim.createLogFile(log_file, initialContents="#" + pd.serialize(), 
                          // compress=T, sep="\t", logInterval=1);
  // log.addGeneration();

  // == Mutations/
  initializeMutationRate(mu);
  
  // neutral mutations
  initializeMutationType("m2", h, "f", -s);
  // gene
  initializeGenomicElementType("g2", m2, 1);

  // == Recombination
  // assumes cM/Mb rates 0.01 / 1e6
  bins = c();
  rates = c();
  for (line in readFile(recmap_file)) {
    parts = strsplit(line, "\t");
    if (parts[0] == "Chromosome") {
      next; // skip HapMap header
    }
    // rates are cM/Mbp per 100kb window
    rates = c(rates, 1e-8 * asFloat(parts[2]));
    bins = c(bins, asInteger(parts[1]));
  }
  print(bins[0:10]);
  defineConstant('rec_rates', rates);
  defineConstant('rec_bins', bins);
  //print(rec_bins);
  initializeRecombinationRate(rec_rates, rec_bins);

  pd = param_dict(c('rep', 'N', 's', 'h', 'mu',
                    'recmap_file', 'annot_file'));
  writeFile(dac_file, "#" + pd.serialize(), compress=T);
  writeFile(sub_file, "#" + pd.serialize(), compress=T);

  // == Genome
  ngenes = 0;
  for (line in readFile(annot_file)) {
    parts = strsplit(line, "\t");
    start = asInteger(parts[1]);
    end = asInteger(parts[2]);
    initializeGenomicElement(g2, start, end-1);
    ngenes = ngenes + 1;
  }
  print("number of genes: " + ngenes);
}

// create a population of 500 individuals
1 {
  sim.addSubpop("p1", N);
  sim.rescheduleScriptBlock(s1, start=2, end=burnin);
  sim.rescheduleScriptBlock(s2, start=endsim, end=endsim);
}

s1 {
  if (sim.generation % 1000 == 0) 
    print(sim.generation);
}

s2 late() {
  output_mutations(chr, dac_file, p1);
  sim.treeSeqOutput(treeseq_file, metadata=metadata);
  output_substitutions(chr, sub_file, p1);
}

