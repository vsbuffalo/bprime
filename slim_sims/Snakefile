import sys
sys.path.extend(['../']) # for bprime modules

import json
from math import floor, log10
import itertools 
import numpy as np
import pyslim
import tskit
import msprime
from datetime import time
from collections import defaultdict, namedtuple
from bprime.samplers import UniformSampler
from bprime.utils import signif, read_params
from bprime.slim import filename_pattern, slim_call

if not len(config):
    raise ValueError("config file not specified on command line, use --configfile config.json")

def filename_pattern(base, params, seed=False, rep=False):
  param_str = [v + '{' + v + '}' for v in params]
  if seed:
    param_str.append('seed{seed}')
  if rep:
    param_str.append('rep{rep}')
  pattern = base + '_'.join(param_str) + '_{{output}}'
  return pattern

def slim_call(params, slim_cmd="slim", rep=False, seed=True, manual=None):
  call_args = []
  for p, (lower, upper, log10, type) in params.items():
    is_str = type is str
    val = f"{{wildcards.{p}}}" if not is_str else f'\\"{{wildcards.{p}}}\\"'
    call_args.append(f"-d {p}={val}")
  if rep:
    call_args.append("-d rep={wildcards.rep}")
  add_on = ''
  if manual is not None:
    # manual stuff
    add_on = []
    for key, val in manual.items():
      if isinstance(val, str):
        add_on.append(f'-d {key}=\\"{val}\\"')
      else:
        add_on.append(f'-d {key}={val}')
    add_on = ' ' + ' '.join(add_on)
  if seed:
    call_args.append("-s {wildcards.seed}")
  full_call = f"{slim_cmd} " + " ".join(call_args) + add_on
  return full_call

# ------- Shared Parameters -------
DATADIR = "../data/slim_sims/"
SLIM = '~/src/SLiM_build/slim'
 
# ------- BGS segments -------
#bgs_ranges = dict(N=(50, 20_000, False, int),
#                  mu=(1e-9, 1e-7, False, float), 
#                  h=(0.5, 0.5, False, float), 
#                  s=(1e-5, 1e-1, False, float), 
#                  rbp=(0.01/1e8, 30/1e8, False, float),
#                  recfrac=(-9, np.log10(0.5), True, float), # Morgans,
#                  seglen=(10, 10_000, False, int)) 

run_params = read_params(config)

sampler = UniformSampler(run_params, total=config['nsamples'], seed=12)
samples = list(sampler)

basename = DATADIR + f"{config['name']}/{config['name']}_"
pattern = filename_pattern(basename, run_params, rep=False, seed=True)

# bgs simulation results
sim_results = []
recap_results = []

# for use if there are more than one sim output files, e.g. log files
sim_outputs = ["treeseq.tree"]
for sample in samples:
  for out in sim_outputs:
    sim_results.append(pattern.format(**sample).format(output=out))
  recap_results.append(pattern.format(**sample).format(output='recap.tree'))

def time_grower(start_time, factor=1.8):
  def time_limit(wildcards, attempt):
      new_time = start_time*(attempt + factor*(attempt-1))
      days = int(new_time // 24)
      time_left = new_time % 24
      hours = int(time_left // 1)
      minutes = int(60*(time_left - (time_left // 1)))
      return f"{days:02d}-{hours}:{minutes}:00"
  return time_limit

rule bgs:
  input: "segment.slim"
  output: [pattern.replace("{{output}}", out) for out in sim_outputs]
  resources: 
    # 1.5 hours that grows 1.8x each failed attempt
    runtime = time_grower(config['init_runtime'])
  run:
    shell(slim_call(run_params, SLIM, rep=False, manual={'config_name': config['name']}) + " {input} ")

rule recap:
  input: treeseq=pattern.replace("{{output}}", 'treeseq.tree')
  output: recap=pattern.replace("{{output}}", 'recap.tree')
  #resources:
  #  time = "00-00:30:00"
  run:
    ts = pyslim.load(input.treeseq)
    md = ts.metadata['SLiM']['user_metadata']
    rts = pyslim.recapitate(ts, recombination_rate=0,
                            ancestral_Ne=md['N'][0]).simplify()
    rts.dump(output.recap)

rule all:
  input:
    sim_results, recap_results
    

