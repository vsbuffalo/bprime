import sys
sys.path.extend(['../']) # for bprime modules

import itertools 
import numpy as np
np.random.seed(1)
from collections import defaultdict, namedtuple
import pickle
import pyslim
import tskit
from bprime.utils import signif
from bprime.slim import filename_pattern, slim_call, param_grid
from bprime.slim import infer_types, read_params

if not len(config):
    raise ValueError("config file not specified on command line, use --configfile config.json")

# ------- Shared Parameters -------
DATADIR = "../data/slim_sims/"
SLIM = '~/src/SLiM_build/slim'

# the output of one BGS slim sim (simple_bgs.slim)
SIM_OUTPUTS = ["seldac.tsv.gz", "sub.tsv.gz", "treeseq.tree"]

# ------- Get Sim Parameters -------
run_params = read_params(config)

# ------- Simple BGS for B Maps -------

bgsmap_types = infer_types(bgsmap_params)

bgsmap_basename = DATADIR + 'bgsmap/bgsmap_'
bgsmap_pattern = filename_pattern(bgsmap_basename, bgsmap_params)

rule bgs_map:
  input: "simple_bgs.slim"
  output: 
    [bgsmap_pattern.replace("{{output}}", out) for out in SIM_OUTPUTS]
  shell:
    slim_call(bgsmap_types, SLIM, seed=False, manual={'basename': 'bgsmap'}) + " {input} "

rule bgs_dac:
  input:
    bgs_pattern.replace("{{output}}", "treeseq.tree")
  output: 
    bgs_pattern.replace("{{output}}", "dac.tsv.gz")
  shell:
      f"""
      python  ../tools/treeseq2dac.py --regions \
        ../data/annotation/neutral_chr{{wildcards.chr}}.bed \
        --recmap ../data/annotation/rec_100kb_chr{{wildcards.chr}}.bed \
        --mu 2.5e-7 {{input}}
      """
 

rule all:
  input:
    #sim_results, lls_results, fig_results, bgstrees_results
    bgsmap_results
