import sys
from math import floor, log10
import itertools 
import numpy as np
import pyslim
import tskit
from collections import defaultdict, namedtuple

np.random.seed(1)


def filename_pattern(base, params, seed=False, rep=False):
  param_str = [v + '{' + v + '}' for v in params]
  if seed:
    param_str.append('seed{seed}')
  if rep:
    param_str.append('rep{rep}')
  pattern = base + '_'.join(param_str) + '_{{output}}'
  return pattern

def slim_call(params, slim_cmd="slim", rep=False):
  call_args = []
  for p in params:
    is_str = isinstance(params[p][0], str) and params[p][0] not in ['T', 'F']
    val = f"{{wildcards.{p}}}" if not is_str else f'\\"{{wildcards.{p}}}\\"'
    if p == 'seed':
      call_args.append(f"-s val")
    else:
      call_args.append(f"-d {p}={val}")
  if rep:
    call_args.append("-d rep={wildcards.rep}")
  return f"{slim_cmd} " + " ".join(call_args)

def param_grid(seed=False, **kwargs):
  params = []
  for param, values in kwargs.items():
    if len(values):
      params.append([(param, v) for v in values])
    else:
      params.append([(param, '')])
  out = list(map(dict, itertools.product(*params)))
  if not seed:
    return out
  for entry in out:
    entry['seed'] = np.random.randint(0, 2**63)
  return out

def signif(x, digits=4):
  return np.round(x, digits-int(floor(log10(abs(x))))-1)

def uniform_samples(param_ranges, nsamples, nreps=1,
                    signif_digits=3, seed=False):
  """
  Generate nsamples, with nreps per parameter. 
  seed: include random seed
  signif_digits: round the parametres to this many significant figures
  """
  params = []
  for sample in range(nsamples):
    param_set = dict()
    for param, ranges in param_ranges.items():
      lower, upper, typefunc, scale = ranges
      use_log10 = scale == 'log10'
      # not the most efficient way to do this but it's okay
      x = np.random.uniform(lower, upper, 1)
      if use_log10:
        x = 10**x
      param_set[param] = typefunc(signif(x, signif_digits))
      if seed:
        param_set['seed'] = np.random.randint(0, 2**63)
    param_set['sample'] = sample
    for rep in range(nreps):
        param_set_rep = dict(param_set)
        param_set_rep['rep'] = rep
        params.append(param_set_rep)
  return params


# ------- Shared Parameters -------
DATADIR = "../data/slim_sims/"
NSAMPLES = 1000
NREPS = 500
SLIM = '~/src/SLiM_build/slim'
 
#N_range = (2, 4, int, 'log10')
N_range = (1000, 1000, int, None)
#mu_range = (5e-8, 5e-7, float, None)
mu_range = (1e-8, 1e-7, float, None)
h_range = (0.5, 0.5, float, None)
#rbp_range = (0.01/1e8, 30/1e8, float, None) # cM/Mbp
rbp_range = (1/1e8, 1/1e8, float, None) # cM/Mbp
#recfrac_range = (-9, np.log10(0.5), float, 'log10') # Morgans
recfrac_range = (-8, -8, float, 'log10') # Morgans
s_range = (-5, np.log10(0.2), float, 'log10')
seglen_range = (10000, 10000, int, None)

# ------- BGS segments -------
bgs_params = dict(N=N_range, 
                  mu=mu_range, h=h_range, 
                  s=s_range, rbp=rbp_range,
                  recfrac=recfrac_range,
                  seglen=seglen_range) 

#bgs_params_extra = dict(N=N_range, 
#                  mu=mu_range, h=h_range, 
#                  s=(-3, np.log10(0.2), float, 'log10'), 
#                  rbp=rbp_range,
#                  recfrac=(-9, -7, float, 'log10'),
#                  seglen=seglen_range) 
                  
bgs_basename = DATADIR + 'segment/segment_'
bgs_pattern = filename_pattern(bgs_basename, bgs_params, rep=True)

# bgs simulation results
bgs_sim_results = []
bgs_recap_results = []

bgs_grid = uniform_samples(bgs_params, nsamples=NSAMPLES, nreps=NREPS, seed=False)

bgs_grid_extra = []
#bgs_grid_extra = uniform_samples(bgs_params_extra, nsamples=NSAMPLES, 
#                                 nreps=NREPS, seed=False)

#print(bgs_grid)
#print(bgs_pattern)
#sys.exit(1)

# for use if there are more than one sim output files, e.g. log files
sim_outputs = ["treeseq.tree"]
for params in bgs_grid + bgs_grid_extra:
  for out in sim_outputs:
    bgs_sim_results.append(bgs_pattern.format(**params).format(output=out))
  bgs_recap_results.append(bgs_pattern.format(**params).format(output='recap.tree'))

rule bgs:
  input: "segment.slim"
  output: [bgs_pattern.replace("{{output}}", out) for out in sim_outputs]
  shell:
    slim_call(bgs_params, SLIM, rep=True) + " {input} "

rule bgs_recap:
  input: treeseq=bgs_pattern.replace("{{output}}", 'treeseq.tree')
  output: recap=bgs_pattern.replace("{{output}}", 'recap.tree')
  run:
    ts = pyslim.load(input.treeseq)
    md = ts.metadata['SLiM']['user_metadata']
    rts = pyslim.recapitate(ts, recombination_rate=0,
                            ancestral_Ne=md['N'][0]).simplify()
    rts.dump(output.recap)

# ------- BGS chromosome tracking region segments -------
 
NREPS_SAMPLE = 5
NSAMPLES = 1000
N_range = (2, np.log10(20000), int, 'log10')
#N_range = (1000, 1000, int, None)
mu_range = (5e-8, 5e-7, float, None)
h_range = (0.5, 0.5, float, None)
rbp_range = (0.01/1e8, 30/1e8, float, None) # cM/Mbp
#rbp_range = (1/1e8, 1/1e8, float, None) # cM/Mbp
s_range = (-5, np.log10(0.2), float, 'log10')
seglen_range = (10, 10000, int, None)

# random samples
bgschrom_uniform_params = dict(N=N_range, 
                               mu=mu_range, h=h_range, 
                               s=s_range, rbp=rbp_range,
                               seglen=seglen_range) 

# grid samples
NREPS_GRID = 5
N_grid = 10**np.linspace(N_range[0], N_range[1], 10)
mu_grid = np.linspace(mu_range[0], mu_range[1], 20)
h_grid = [0.5]
rbp_grid = np.linspace(rbp_range[0], rbp_range[1], 20)
s_grid = 10**np.linspace(s_range[0], s_range[1], 20)
seglen_grid = np.arange(10, 10100, 200)

bgschrom_grid_params = dict(N=N_grid, 
                            mu=mu_grid, h=h_grid, 
                            s=s_grid, rbp=rbp_grid,
                            seglen=seglen_grid, 
                            rep=np.arange(NREPS_GRID)) 
      


bgschrom_basename = DATADIR + 'segchrom/segchrom_'
bgschrom_pattern = filename_pattern(bgschrom_basename, bgschrom_grid_params, rep=True)

# bgs simulation results
bgschrom_sim_results = []
bgschrom_recap_results = []

bgschrom_uniform_samples = uniform_samples(bgschrom_uniform_params, nsamples=NSAMPLES, nreps=NREPS_SAMPLE, seed=False)
bgschrom_grid_samples = param_grid(**bgschrom_grid_params)

# for use if there are more than one sim output files, e.g. log files
all_bgschrom_params = bgschrom_grid_samples #+ bgschrom_uniform_samples
print(f"total bgschrom sims: {len(all_bgschrom_params)}")
for params in all_bgschrom_params:
  for out in sim_outputs:
    bgschrom_sim_results.append(bgschrom_pattern.format(**params).format(output=out))
  bgschrom_recap_results.append(bgschrom_pattern.format(**params).format(output='recap.tree'))


rule bgs_chromtrack:
  input: "segment_chromosome.slim"
  output: [bgschrom_pattern.replace("{{output}}", out) for out in sim_outputs]
  shell:
    slim_call(bgschrom_grid_params, SLIM, rep=True) + " {input} "


rule bgs_chromtrack_recap:
  input: treeseq=bgschrom_pattern.replace("{{output}}", 'treeseq.tree')
  output: recap=bgschrom_pattern.replace("{{output}}", 'recap.tree')
  run:
    ts = pyslim.load(input.treeseq)
    md = ts.metadata['SLiM']['user_metadata']
    N = int(md['N'][0])
    track_rbp = float(md['track_rbp'][0])
    rbp = float(md['rbp'][0])
    tracklen = int(md['tracklen'][0])
    seglen = int(md['seglen'][0])
    rates = msprime.RateMap(position=[0, tracklen, tracklen+seglen, 2*tracklen+seglen],
                            rate=[track_rbp, rbp, track_rbp])
    rts = pyslim.recapitate(ts, 
                            #recombination_rate=0,
                            recombination_rate=rates,
                            ancestral_Ne=N).simplify()
    rts.dump(output.recap)

rule all:
  input:
    bgschrom_sim_results, bgschrom_recap_results
    #bgs_sim_results, bgs_recap_results
    

